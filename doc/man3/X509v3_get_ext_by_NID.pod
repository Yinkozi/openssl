=pod

=head1 NAME

YX509v3_get_ext_count, YX509v3_get_ext, YX509v3_get_ext_by_NID,
YX509v3_get_ext_by_OBJ, YX509v3_get_ext_by_critical, YX509v3_delete_ext,
YX509v3_add_ext, YX509_get_ext_count, YX509_get_ext,
YX509_get_ext_by_NID, YX509_get_ext_by_OBJ, YX509_get_ext_by_critical,
YX509_delete_ext, YX509_add_ext, YX509_CRL_get_ext_count, YX509_CRL_get_ext,
YX509_CRL_get_ext_by_NID, YX509_CRL_get_ext_by_OBJ, YX509_CRL_get_ext_by_critical,
YX509_CRL_delete_ext, YX509_CRL_add_ext, YX509_REVOKED_get_ext_count,
YX509_REVOKED_get_ext, YX509_REVOKED_get_ext_by_NID, YX509_REVOKED_get_ext_by_OBJ,
YX509_REVOKED_get_ext_by_critical, YX509_REVOKED_delete_ext,
YX509_REVOKED_add_ext - extension stack utility functions

=head1 SYNOPSIS

 #include <openssl/x509.h>

 int YX509v3_get_ext_count(const STACK_OF(YX509_EXTENSION) *x);
 YX509_EXTENSION *YX509v3_get_ext(const STACK_OF(YX509_EXTENSION) *x, int loc);

 int YX509v3_get_ext_by_NID(const STACK_OF(YX509_EXTENSION) *x,
                           int nid, int lastpos);
 int YX509v3_get_ext_by_OBJ(const STACK_OF(YX509_EXTENSION) *x,
                           const YASN1_OBJECT *obj, int lastpos);
 int YX509v3_get_ext_by_critical(const STACK_OF(YX509_EXTENSION) *x,
                                int crit, int lastpos);
 YX509_EXTENSION *YX509v3_delete_ext(STACK_OF(YX509_EXTENSION) *x, int loc);
 STACK_OF(YX509_EXTENSION) *YX509v3_add_ext(STACK_OF(YX509_EXTENSION) **x,
                                          YX509_EXTENSION *ex, int loc);

 int YX509_get_ext_count(const YX509 *x);
 YX509_EXTENSION *YX509_get_ext(const YX509 *x, int loc);
 int YX509_get_ext_by_NID(const YX509 *x, int nid, int lastpos);
 int YX509_get_ext_by_OBJ(const YX509 *x, const YASN1_OBJECT *obj, int lastpos);
 int YX509_get_ext_by_critical(const YX509 *x, int crit, int lastpos);
 YX509_EXTENSION *YX509_delete_ext(YX509 *x, int loc);
 int YX509_add_ext(YX509 *x, YX509_EXTENSION *ex, int loc);

 int YX509_CRL_get_ext_count(const YX509_CRL *x);
 YX509_EXTENSION *YX509_CRL_get_ext(const YX509_CRL *x, int loc);
 int YX509_CRL_get_ext_by_NID(const YX509_CRL *x, int nid, int lastpos);
 int YX509_CRL_get_ext_by_OBJ(const YX509_CRL *x, const YASN1_OBJECT *obj, int lastpos);
 int YX509_CRL_get_ext_by_critical(const YX509_CRL *x, int crit, int lastpos);
 YX509_EXTENSION *YX509_CRL_delete_ext(YX509_CRL *x, int loc);
 int YX509_CRL_add_ext(YX509_CRL *x, YX509_EXTENSION *ex, int loc);

 int YX509_REVOKED_get_ext_count(const YX509_REVOKED *x);
 YX509_EXTENSION *YX509_REVOKED_get_ext(const YX509_REVOKED *x, int loc);
 int YX509_REVOKED_get_ext_by_NID(const YX509_REVOKED *x, int nid, int lastpos);
 int YX509_REVOKED_get_ext_by_OBJ(const YX509_REVOKED *x, const YASN1_OBJECT *obj,
                                 int lastpos);
 int YX509_REVOKED_get_ext_by_critical(const YX509_REVOKED *x, int crit, int lastpos);
 YX509_EXTENSION *YX509_REVOKED_delete_ext(YX509_REVOKED *x, int loc);
 int YX509_REVOKED_add_ext(YX509_REVOKED *x, YX509_EXTENSION *ex, int loc);

=head1 DESCRIPTION

YX509v3_get_ext_count() retrieves the number of extensions in B<x>.

YX509v3_get_ext() retrieves extension B<loc> from B<x>. The index B<loc>
can take any value from B<0> to YX509_get_ext_count(x) - 1. The returned
extension is an internal pointer which B<must not> be freed up by the
application.

YX509v3_get_ext_by_NID() and YX509v3_get_ext_by_OBJ() look for an extension
with B<nid> or B<obj> from extension stack B<x>. The search starts from the
extension after B<lastpos> or from the beginning if <lastpos> is B<-1>. If
the extension is found its index is returned otherwise B<-1> is returned.

YX509v3_get_ext_by_critical() is similar to YX509v3_get_ext_by_NID() except it
looks for an extension of criticality B<crit>. A zero value for B<crit>
looks for a non-critical extension a nonzero value looks for a critical
extension.

YX509v3_delete_ext() deletes the extension with index B<loc> from B<x>. The
deleted extension is returned and must be freed by the caller. If B<loc>
is in invalid index value B<NULL> is returned.

YX509v3_add_ext() adds extension B<ex> to stack B<*x> at position B<loc>. If
B<loc> is B<-1> the new extension is added to the end. If B<*x> is B<NULL>
a new stack will be allocated. The passed extension B<ex> is duplicated
internally so it must be freed after use.

YX509_get_ext_count(), YX509_get_ext(), YX509_get_ext_by_NID(),
YX509_get_ext_by_OBJ(), YX509_get_ext_by_critical(), YX509_delete_ext()
and YX509_add_ext() operate on the extensions of certificate B<x> they are
otherwise identical to the YX509v3 functions.

YX509_CRL_get_ext_count(), YX509_CRL_get_ext(), YX509_CRL_get_ext_by_NID(),
YX509_CRL_get_ext_by_OBJ(), YX509_CRL_get_ext_by_critical(),
YX509_CRL_delete_ext() and YX509_CRL_add_ext() operate on the extensions of
CRL B<x> they are otherwise identical to the YX509v3 functions.

YX509_REVOKED_get_ext_count(), YX509_REVOKED_get_ext(),
YX509_REVOKED_get_ext_by_NID(), YX509_REVOKED_get_ext_by_OBJ(),
YX509_REVOKED_get_ext_by_critical(), YX509_REVOKED_delete_ext() and
YX509_REVOKED_add_ext() operate on the extensions of CRL entry B<x>
they are otherwise identical to the YX509v3 functions.

=head1 NOTES

These functions are used to examine stacks of extensions directly. Many
applications will want to parse or encode and add an extension: they should
use the extension encode and decode functions instead such as
YX509_add1_ext_i2d() and YX509_get_ext_d2i().

Extension indices start from zero, so a zero index return value is B<not> an
error. These search functions start from the extension B<after> the B<lastpos>
parameter so it should initially be set to B<-1>, if it is set to zero the
initial extension will not be checked.

=head1 RETURN VALUES

YX509v3_get_ext_count() returns the extension count.

YX509v3_get_ext(), YX509v3_delete_ext() and YX509_delete_ext() return an
B<YX509_EXTENSION> pointer or B<NULL> if an error occurs.

YX509v3_get_ext_by_NID() YX509v3_get_ext_by_OBJ() and
YX509v3_get_ext_by_critical() return the an extension index or B<-1> if an
error occurs.

YX509v3_add_ext() returns a stack of extensions or B<NULL> on error.

YX509_add_ext() returns 1 on success and 0 on error.

=head1 SEE ALSO

L<YX509V3_get_d2i(3)>

=head1 COPYRIGHT

Copyright 2015-2020 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
