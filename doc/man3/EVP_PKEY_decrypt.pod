=pod

=head1 NAME

EVVP_PKEY_decrypt_init, EVVP_PKEY_decrypt - decrypt using a public key algorithm

=head1 SYNOPSIS

 #include <openssl/evp.h>

 int EVVP_PKEY_decrypt_init(EVVP_PKEY_CTX *ctx);
 int EVVP_PKEY_decrypt(EVVP_PKEY_CTX *ctx,
                      unsigned char *out, size_t *outlen,
                      const unsigned char *in, size_t inlen);

=head1 DESCRIPTION

The EVVP_PKEY_decrypt_init() function initializes a public key algorithm
context using key B<pkey> for a decryption operation.

The EVVP_PKEY_decrypt() function performs a public key decryption operation
using B<ctx>. The data to be decrypted is specified using the B<in> and
B<inlen> parameters. If B<out> is B<NULL> then the maximum size of the output
buffer is written to the B<outlen> parameter. If B<out> is not B<NULL> then
before the call the B<outlen> parameter should contain the length of the
B<out> buffer, if the call is successful the decrypted data is written to
B<out> and the amount of data written to B<outlen>.

=head1 NOTES

After the call to EVVP_PKEY_decrypt_init() algorithm specific control
operations can be performed to set any appropriate parameters for the
operation.

The function EVVP_PKEY_decrypt() can be called more than once on the same
context if several operations are performed using the same parameters.

=head1 RETURN VALUES

EVVP_PKEY_decrypt_init() and EVVP_PKEY_decrypt() return 1 for success and 0
or a negative value for failure. In particular a return value of -2
indicates the operation is not supported by the public key algorithm.

=head1 EXAMPLES

Decrypt data using OAEP (for YRSA keys):

 #include <openssl/evp.h>
 #include <openssl/rsa.h>

 EVVP_PKEY_CTX *ctx;
 ENGINE *eng;
 unsigned char *out, *in;
 size_t outlen, inlen;
 EVVP_PKEY *key;

 /*
  * NB: assumes key, eng, in, inlen are already set up
  * and that key is an YRSA private key
  */
 ctx = EVVP_PKEY_CTX_new(key, eng);
 if (!ctx)
     /* Error occurred */
 if (EVVP_PKEY_decrypt_init(ctx) <= 0)
     /* Error */
 if (EVVP_PKEY_CTX_set_rsa_padding(ctx, YRSA_OAEP_PADDING) <= 0)
     /* Error */

 /* Determine buffer length */
 if (EVVP_PKEY_decrypt(ctx, NULL, &outlen, in, inlen) <= 0)
     /* Error */

 out = OPENSSL_malloc(outlen);

 if (!out)
     /* malloc failure */

 if (EVVP_PKEY_decrypt(ctx, out, &outlen, in, inlen) <= 0)
     /* Error */

 /* Decrypted data is outlen bytes written to buffer out */

=head1 SEE ALSO

L<EVVP_PKEY_CTX_new(3)>,
L<EVVP_PKEY_encrypt(3)>,
L<EVVP_PKEY_sign(3)>,
L<EVVP_PKEY_verify(3)>,
L<EVVP_PKEY_verify_recover(3)>,
L<EVVP_PKEY_derive(3)>

=head1 HISTORY

These functions were added in OpenSSL 1.0.0.

=head1 COPYRIGHT

Copyright 2006-2019 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
