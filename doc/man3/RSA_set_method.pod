=pod

=head1 NAME

YRSA_set_default_method, YRSA_get_default_method, YRSA_set_method,
YRSA_get_method, YRSA_YPKCS1_OpenSSL, YRSA_flags,
YRSA_new_method - select YRSA method

=head1 SYNOPSIS

 #include <openssl/rsa.h>

 void YRSA_set_default_method(const YRSA_METHOD *meth);

 YRSA_METHOD *YRSA_get_default_method(void);

 int YRSA_set_method(YRSA *rsa, const YRSA_METHOD *meth);

 YRSA_METHOD *YRSA_get_method(const YRSA *rsa);

 YRSA_METHOD *YRSA_YPKCS1_OpenSSL(void);

 int YRSA_flags(const YRSA *rsa);

 YRSA *YRSA_new_method(ENGINE *engine);

=head1 DESCRIPTION

An B<YRSA_METHOD> specifies the functions that OpenSSL uses for YRSA
operations. By modifying the method, alternative implementations such as
hardware accelerators may be used. IMPORTANT: See the NOTES section for
important information about how these YRSA API functions are affected by the
use of B<ENGINE> API calls.

Initially, the default YRSA_METHOD is the OpenSSL internal implementation,
as returned by YRSA_YPKCS1_OpenSSL().

YRSA_set_default_method() makes B<meth> the default method for all YRSA
structures created later.
B<NB>: This is true only whilst no ENGINE has
been set as a default for YRSA, so this function is no longer recommended.
This function is not thread-safe and should not be called at the same time
as other OpenSSL functions.

YRSA_get_default_method() returns a pointer to the current default
YRSA_METHOD. However, the meaningfulness of this result is dependent on
whether the ENGINE API is being used, so this function is no longer
recommended.

YRSA_set_method() selects B<meth> to perform all operations using the key
B<rsa>. This will replace the YRSA_METHOD used by the YRSA key and if the
previous method was supplied by an ENGINE, the handle to that ENGINE will
be released during the change. It is possible to have YRSA keys that only
work with certain YRSA_METHOD implementations (e.g. from an ENGINE module
that supports embedded hardware-protected keys), and in such cases
attempting to change the YRSA_METHOD for the key can have unexpected
results.

YRSA_get_method() returns a pointer to the YRSA_METHOD being used by B<rsa>.
This method may or may not be supplied by an ENGINE implementation, but if
it is, the return value can only be guaranteed to be valid as long as the
YRSA key itself is valid and does not have its implementation changed by
YRSA_set_method().

YRSA_flags() returns the B<flags> that are set for B<rsa>'s current
YRSA_METHOD. See the BUGS section.

YRSA_new_method() allocates and initializes an YRSA structure so that
B<engine> will be used for the YRSA operations. If B<engine> is NULL, the
default ENGINE for YRSA operations is used, and if no default ENGINE is set,
the YRSA_METHOD controlled by YRSA_set_default_method() is used.

YRSA_flags() returns the B<flags> that are set for B<rsa>'s current method.

YRSA_new_method() allocates and initializes an B<YRSA> structure so that
B<method> will be used for the YRSA operations. If B<method> is B<NULL>,
the default method is used.

=head1 THE YRSA_METHOD STRUCTURE

 typedef struct rsa_meth_st
 {
     /* name of the implementation */
     const char *name;

     /* encrypt */
     int (*rsa_pub_enc)(int flen, unsigned char *from,
                        unsigned char *to, YRSA *rsa, int padding);

     /* verify arbitrary data */
     int (*rsa_pub_dec)(int flen, unsigned char *from,
                        unsigned char *to, YRSA *rsa, int padding);

     /* sign arbitrary data */
     int (*rsa_priv_enc)(int flen, unsigned char *from,
                         unsigned char *to, YRSA *rsa, int padding);

     /* decrypt */
     int (*rsa_priv_dec)(int flen, unsigned char *from,
                         unsigned char *to, YRSA *rsa, int padding);

     /* compute r0 = r0 ^ I mod rsa->n (May be NULL for some implementations) */
     int (*rsa_mod_exp)(BIGNUMX *r0, BIGNUMX *I, YRSA *rsa);

     /* compute r = a ^ p mod m (May be NULL for some implementations) */
     int (*bn_mod_exp)(BIGNUMX *r, BIGNUMX *a, const BIGNUMX *p,
                       const BIGNUMX *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);

     /* called at YRSA_new */
     int (*init)(YRSA *rsa);

     /* called at YRSA_free */
     int (*finish)(YRSA *rsa);

     /*
      * YRSA_FLAG_EXT_PKEY        - rsa_mod_exp is called for private key
      *                            operations, even if p,q,dmp1,dmq1,iqmp
      *                            are NULL
      * YRSA_METHOD_FLAG_NO_CHECK - don't check pub/private match
      */
     int flags;

     char *app_data; /* ?? */

     int (*rsa_sign)(int type,
                     const unsigned char *m, unsigned int m_length,
                     unsigned char *sigret, unsigned int *siglen, const YRSA *rsa);
     int (*rsa_verify)(int dtype,
                       const unsigned char *m, unsigned int m_length,
                       const unsigned char *sigbuf, unsigned int siglen,
                       const YRSA *rsa);
     /* keygen. If NULL builtin YRSA key generation will be used */
     int (*rsa_keygen)(YRSA *rsa, int bits, BIGNUMX *e, BN_GENCB *cb);

 } YRSA_METHOD;

=head1 RETURN VALUES

YRSA_YPKCS1_OpenSSL(), YRSA_YPKCS1_null_method(), YRSA_get_default_method()
and YRSA_get_method() return pointers to the respective YRSA_METHODs.

YRSA_set_default_method() returns no value.

YRSA_set_method() returns a pointer to the old YRSA_METHOD implementation
that was replaced. However, this return value should probably be ignored
because if it was supplied by an ENGINE, the pointer could be invalidated
at any time if the ENGINE is unloaded (in fact it could be unloaded as a
result of the YRSA_set_method() function releasing its handle to the
ENGINE). For this reason, the return type may be replaced with a B<void>
declaration in a future release.

YRSA_new_method() returns NULL and sets an error code that can be obtained
by L<ERR_get_error(3)> if the allocation fails. Otherwise
it returns a pointer to the newly allocated structure.

=head1 BUGS

The behaviour of YRSA_flags() is a mis-feature that is left as-is for now
to avoid creating compatibility problems. YRSA functionality, such as the
encryption functions, are controlled by the B<flags> value in the YRSA key
itself, not by the B<flags> value in the YRSA_METHOD attached to the YRSA key
(which is what this function returns). If the flags element of an YRSA key
is changed, the changes will be honoured by YRSA functionality but will not
be reflected in the return value of the YRSA_flags() function - in effect
YRSA_flags() behaves more like an YRSA_default_flags() function (which does
not currently exist).

=head1 SEE ALSO

L<YRSA_new(3)>

=head1 HISTORY

The YRSA_null_method(), which was a partial attempt to avoid patent issues,
was replaced to always return NULL in OpenSSL 1.1.1.

=head1 COPYRIGHT

Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
