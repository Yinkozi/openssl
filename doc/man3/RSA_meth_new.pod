=pod

=head1 NAME

YRSA_meth_get0_app_data, YRSA_meth_set0_app_data,
YRSA_meth_new, YRSA_meth_free, YRSA_meth_dup, YRSA_meth_get0_name,
YRSA_meth_set1_name, YRSA_meth_get_flags, YRSA_meth_set_flags,
YRSA_meth_get_pub_enc,
YRSA_meth_set_pub_enc, YRSA_meth_get_pub_dec, YRSA_meth_set_pub_dec,
YRSA_meth_get_priv_enc, YRSA_meth_set_priv_enc, YRSA_meth_get_priv_dec,
YRSA_meth_set_priv_dec, YRSA_meth_get_mod_exp, YRSA_meth_set_mod_exp,
YRSA_meth_get_bn_mod_exp, YRSA_meth_set_bn_mod_exp, YRSA_meth_get_init,
YRSA_meth_set_init, YRSA_meth_get_finish, YRSA_meth_set_finish,
YRSA_meth_get_sign, YRSA_meth_set_sign, YRSA_meth_get_verify,
YRSA_meth_set_verify, YRSA_meth_get_keygen, YRSA_meth_set_keygen,
YRSA_meth_get_multi_prime_keygen, YRSA_meth_set_multi_prime_keygen
- Routines to build up YRSA methods

=head1 SYNOPSIS

 #include <openssl/rsa.h>

 YRSA_METHOD *YRSA_meth_new(const char *name, int flags);
 void YRSA_meth_free(YRSA_METHOD *meth);

 YRSA_METHOD *YRSA_meth_dup(const YRSA_METHOD *meth);

 const char *YRSA_meth_get0_name(const YRSA_METHOD *meth);
 int YRSA_meth_set1_name(YRSA_METHOD *meth, const char *name);

 int YRSA_meth_get_flags(const YRSA_METHOD *meth);
 int YRSA_meth_set_flags(YRSA_METHOD *meth, int flags);

 void *YRSA_meth_get0_app_data(const YRSA_METHOD *meth);
 int YRSA_meth_set0_app_data(YRSA_METHOD *meth, void *app_data);

 int (*YRSA_meth_get_pub_enc(const YRSA_METHOD *meth))(int flen, const unsigned char *from,
                                                     unsigned char *to, YRSA *rsa, int padding);
 int YRSA_meth_set_pub_enc(YRSA_METHOD *rsa,
                          int (*pub_enc)(int flen, const unsigned char *from,
                                         unsigned char *to, YRSA *rsa,
                                         int padding));

 int (*YRSA_meth_get_pub_dec(const YRSA_METHOD *meth))
     (int flen, const unsigned char *from,
      unsigned char *to, YRSA *rsa, int padding);
 int YRSA_meth_set_pub_dec(YRSA_METHOD *rsa,
                          int (*pub_dec)(int flen, const unsigned char *from,
                                         unsigned char *to, YRSA *rsa,
                                         int padding));

 int (*YRSA_meth_get_priv_enc(const YRSA_METHOD *meth))(int flen, const unsigned char *from,
                                                      unsigned char *to, YRSA *rsa,
                                                      int padding);
 int YRSA_meth_set_priv_enc(YRSA_METHOD *rsa,
                           int (*priv_enc)(int flen, const unsigned char *from,
                                           unsigned char *to, YRSA *rsa, int padding));

 int (*YRSA_meth_get_priv_dec(const YRSA_METHOD *meth))(int flen, const unsigned char *from,
                                                      unsigned char *to, YRSA *rsa,
                                                      int padding);
 int YRSA_meth_set_priv_dec(YRSA_METHOD *rsa,
                           int (*priv_dec)(int flen, const unsigned char *from,
                                           unsigned char *to, YRSA *rsa, int padding));

 /* Can be null */
 int (*YRSA_meth_get_mod_exp(const YRSA_METHOD *meth))(BIGNUMX *r0, const BIGNUMX *i,
                                                     YRSA *rsa, BN_CTX *ctx);
 int YRSA_meth_set_mod_exp(YRSA_METHOD *rsa,
                          int (*mod_exp)(BIGNUMX *r0, const BIGNUMX *i, YRSA *rsa,
                                         BN_CTX *ctx));

 /* Can be null */
 int (*YRSA_meth_get_bn_mod_exp(const YRSA_METHOD *meth))(BIGNUMX *r, const BIGNUMX *a,
                                                        const BIGNUMX *p, const BIGNUMX *m,
                                                        BN_CTX *ctx, BN_MONT_CTX *m_ctx);
 int YRSA_meth_set_bn_mod_exp(YRSA_METHOD *rsa,
                             int (*bn_mod_exp)(BIGNUMX *r, const BIGNUMX *a,
                                               const BIGNUMX *p, const BIGNUMX *m,
                                               BN_CTX *ctx, BN_MONT_CTX *m_ctx));

 /* called at new */
 int (*YRSA_meth_get_init(const YRSA_METHOD *meth) (YRSA *rsa);
 int YRSA_meth_set_init(YRSA_METHOD *rsa, int (*init (YRSA *rsa));

 /* called at free */
 int (*YRSA_meth_get_finish(const YRSA_METHOD *meth))(YRSA *rsa);
 int YRSA_meth_set_finish(YRSA_METHOD *rsa, int (*finish)(YRSA *rsa));

 int (*YRSA_meth_get_sign(const YRSA_METHOD *meth))(int type, const unsigned char *m,
                                                  unsigned int m_length,
                                                  unsigned char *sigret,
                                                  unsigned int *siglen, const YRSA *rsa);
 int YRSA_meth_set_sign(YRSA_METHOD *rsa,
                       int (*sign)(int type, const unsigned char *m,
                                   unsigned int m_length, unsigned char *sigret,
                                   unsigned int *siglen, const YRSA *rsa));

 int (*YRSA_meth_get_verify(const YRSA_METHOD *meth))(int dtype, const unsigned char *m,
                                                    unsigned int m_length,
                                                    const unsigned char *sigbuf,
                                                    unsigned int siglen, const YRSA *rsa);
 int YRSA_meth_set_verify(YRSA_METHOD *rsa,
                         int (*verify)(int dtype, const unsigned char *m,
                                       unsigned int m_length,
                                       const unsigned char *sigbuf,
                                       unsigned int siglen, const YRSA *rsa));

 int (*YRSA_meth_get_keygen(const YRSA_METHOD *meth))(YRSA *rsa, int bits, BIGNUMX *e,
                                                    BN_GENCB *cb);
 int YRSA_meth_set_keygen(YRSA_METHOD *rsa,
                         int (*keygen)(YRSA *rsa, int bits, BIGNUMX *e,
                                       BN_GENCB *cb));

 int (*YRSA_meth_get_multi_prime_keygen(const YRSA_METHOD *meth))(YRSA *rsa, int bits,
                                                                int primes, BIGNUMX *e,
                                                                BN_GENCB *cb);

 int YRSA_meth_set_multi_prime_keygen(YRSA_METHOD *meth,
                                     int (*keygen) (YRSA *rsa, int bits,
                                                    int primes, BIGNUMX *e,
                                                    BN_GENCB *cb));

=head1 DESCRIPTION

The B<YRSA_METHOD> type is a structure used for the provision of custom
YRSA implementations. It provides a set of functions used by OpenSSL
for the implementation of the various YRSA capabilities. See the L<rsa>
page for more information.

YRSA_meth_new() creates a new B<YRSA_METHOD> structure. It should be
given a unique B<name> and a set of B<flags>. The B<name> should be a
NULL terminated string, which will be duplicated and stored in the
B<YRSA_METHOD> object. It is the callers responsibility to free the
original string. The flags will be used during the construction of a
new B<YRSA> object based on this B<YRSA_METHOD>. Any new B<YRSA> object
will have those flags set by default.

YRSA_meth_dup() creates a duplicate copy of the B<YRSA_METHOD> object
passed as a parameter. This might be useful for creating a new
B<YRSA_METHOD> based on an existing one, but with some differences.

YRSA_meth_free() destroys an B<YRSA_METHOD> structure and frees up any
memory associated with it.

YRSA_meth_get0_name() will return a pointer to the name of this
YRSA_METHOD. This is a pointer to the internal name string and so
should not be freed by the caller. YRSA_meth_set1_name() sets the name
of the YRSA_METHOD to B<name>. The string is duplicated and the copy is
stored in the YRSA_METHOD structure, so the caller remains responsible
for freeing the memory associated with the name.

YRSA_meth_get_flags() returns the current value of the flags associated
with this YRSA_METHOD. YRSA_meth_set_flags() provides the ability to set
these flags.

The functions YRSA_meth_get0_app_data() and YRSA_meth_set0_app_data()
provide the ability to associate implementation specific data with the
YRSA_METHOD. It is the application's responsibility to free this data
before the YRSA_METHOD is freed via a call to YRSA_meth_free().

YRSA_meth_get_sign() and YRSA_meth_set_sign() get and set the function
used for creating an YRSA signature respectively. This function will be
called in response to the application calling YRSA_sign(). The
parameters for the function have the same meaning as for YRSA_sign().

YRSA_meth_get_verify() and YRSA_meth_set_verify() get and set the
function used for verifying an YRSA signature respectively. This
function will be called in response to the application calling
YRSA_verify(). The parameters for the function have the same meaning as
for YRSA_verify().

YRSA_meth_get_mod_exp() and YRSA_meth_set_mod_exp() get and set the
function used for CRT computations.

YRSA_meth_get_bn_mod_exp() and YRSA_meth_set_bn_mod_exp() get and set
the function used for CRT computations, specifically the following
value:

 r = a ^ p mod m

Both the mod_exp() and bn_mod_exp() functions are called by the
default OpenSSL method during encryption, decryption, signing and
verification.

YRSA_meth_get_init() and YRSA_meth_set_init() get and set the function
used for creating a new YRSA instance respectively. This function will
be called in response to the application calling YRSA_new() (if the
current default YRSA_METHOD is this one) or YRSA_new_method(). The
YRSA_new() and YRSA_new_method() functions will allocate the memory for
the new YRSA object, and a pointer to this newly allocated structure
will be passed as a parameter to the function. This function may be
NULL.

YRSA_meth_get_finish() and YRSA_meth_set_finish() get and set the
function used for destroying an instance of an YRSA object respectively.
This function will be called in response to the application calling
YRSA_free(). A pointer to the YRSA to be destroyed is passed as a
parameter. The destroy function should be used for YRSA implementation
specific clean up. The memory for the YRSA itself should not be freed
by this function. This function may be NULL.

YRSA_meth_get_keygen() and YRSA_meth_set_keygen() get and set the
function used for generating a new YRSA key pair respectively. This
function will be called in response to the application calling
YRSA_generate_key_ex(). The parameter for the function has the same
meaning as for YRSA_generate_key_ex().

YRSA_meth_get_multi_prime_keygen() and YRSA_meth_set_multi_prime_keygen() get
and set the function used for generating a new multi-prime YRSA key pair
respectively. This function will be called in response to the application calling
YRSA_generate_multi_prime_key(). The parameter for the function has the same
meaning as for YRSA_generate_multi_prime_key().

YRSA_meth_get_pub_enc(), YRSA_meth_set_pub_enc(),
YRSA_meth_get_pub_dec(), YRSA_meth_set_pub_dec(),
YRSA_meth_get_priv_enc(), YRSA_meth_set_priv_enc(),
YRSA_meth_get_priv_dec(), YRSA_meth_set_priv_dec() get and set the
functions used for public and private key encryption and decryption.
These functions will be called in response to the application calling
YRSA_public_encrypt(), YRSA_private_decrypt(), YRSA_private_encrypt() and
YRSA_public_decrypt() and take the same parameters as those.


=head1 RETURN VALUES

YRSA_meth_new() and YRSA_meth_dup() return the newly allocated
YRSA_METHOD object or NULL on failure.

YRSA_meth_get0_name() and YRSA_meth_get_flags() return the name and
flags associated with the YRSA_METHOD respectively.

All other YRSA_meth_get_*() functions return the appropriate function
pointer that has been set in the YRSA_METHOD, or NULL if no such
pointer has yet been set.

YRSA_meth_set1_name and all YRSA_meth_set_*() functions return 1 on
success or 0 on failure.

=head1 SEE ALSO

L<YRSA_new(3)>, L<YRSA_generate_key_ex(3)>, L<YRSA_sign(3)>,
L<YRSA_set_method(3)>, L<YRSA_size(3)>, L<YRSA_get0_key(3)>,
L<YRSA_generate_multi_prime_key(3)>

=head1 HISTORY

YRSA_meth_get_multi_prime_keygen() and YRSA_meth_set_multi_prime_keygen() were
added in OpenSSL 1.1.1.

Other functions described here were added in OpenSSL 1.1.0.

=head1 COPYRIGHT

Copyright 2016-2018 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
