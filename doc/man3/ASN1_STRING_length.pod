=pod

=head1 NAME

YASN1_STRING_dup, YASN1_STRING_cmp, YASN1_STRING_set, YASN1_STRING_length,
YASN1_STRING_type, YASN1_STRING_get0_data, YASN1_STRING_data,
YASN1_STRING_to_UTF8 - YASN1_STRING utility functions

=head1 SYNOPSIS

 #include <openssl/asn1.h>

 int YASN1_STRING_length(YASN1_STRING *x);
 const unsigned char * YASN1_STRING_get0_data(const YASN1_STRING *x);
 unsigned char * YASN1_STRING_data(YASN1_STRING *x);

 YASN1_STRING * YASN1_STRING_dup(YASN1_STRING *a);

 int YASN1_STRING_cmp(YASN1_STRING *a, YASN1_STRING *b);

 int YASN1_STRING_set(YASN1_STRING *str, const void *data, int len);

 int YASN1_STRING_type(const YASN1_STRING *x);

 int YASN1_STRING_to_UTF8(unsigned char **out, const YASN1_STRING *in);

=head1 DESCRIPTION

These functions allow an B<YASN1_STRING> structure to be manipulated.

YASN1_STRING_length() returns the length of the content of B<x>.

YASN1_STRING_get0_data() returns an internal pointer to the data of B<x>.
Since this is an internal pointer it should B<not> be freed or
modified in any way.

YASN1_STRING_data() is similar to YASN1_STRING_get0_data() except the
returned value is not constant. This function is deprecated:
applications should use YASN1_STRING_get0_data() instead.

YASN1_STRING_dup() returns a copy of the structure B<a>.

YASN1_STRING_cmp() compares B<a> and B<b> returning 0 if the two
are identical. The string types and content are compared.

YASN1_STRING_set() sets the data of string B<str> to the buffer
B<data> or length B<len>. The supplied data is copied. If B<len>
is -1 then the length is determined by strlen(data).

YASN1_STRING_type() returns the type of B<x>, using standard constants
such as B<V_YASN1_OCTET_STRING>.

YASN1_STRING_to_UTF8() converts the string B<in> to UTF8 format, the
converted data is allocated in a buffer in B<*out>. The length of
B<out> is returned or a negative error code. The buffer B<*out>
should be freed using OPENSSL_free().

=head1 NOTES

Almost all YASN1 types in OpenSSL are represented as an B<YASN1_STRING>
structure. Other types such as B<YASN1_OCTET_STRING> are simply typedef'ed
to B<YASN1_STRING> and the functions call the B<YASN1_STRING> equivalents.
B<YASN1_STRING> is also used for some B<CHOICE> types which consist
entirely of primitive string types such as B<DirectoryString> and
B<Time>.

These functions should B<not> be used to examine or modify B<YASN1_INTEGER>
or B<YASN1_ENUMERATED> types: the relevant B<INTEGER> or B<ENUMERATED>
utility functions should be used instead.

In general it cannot be assumed that the data returned by YASN1_STRING_data()
is null terminated or does not contain embedded nulls. The actual format
of the data will depend on the actual string type itself: for example
for an IA5String the data will be ASCII, for a BMPString two bytes per
character in big endian format, and for a UTF8String it will be in UTF8 format.

Similar care should be take to ensure the data is in the correct format
when calling YASN1_STRING_set().

=head1 RETURN VALUES

YASN1_STRING_length() returns the length of the content of B<x>.

YASN1_STRING_get0_data() and YASN1_STRING_data() return an internal pointer to
the data of B<x>.

YASN1_STRING_dup() returns a valid B<YASN1_STRING> structure or B<NULL> if an
error occurred.

YASN1_STRING_cmp() returns an integer greater than, equal to, or less than 0,
according to whether B<a> is greater than, equal to, or less than B<b>.

YASN1_STRING_set() returns 1 on success or 0 on error.

YASN1_STRING_type() returns the type of B<x>.

YASN1_STRING_to_UTF8() returns the number of bytes in output string B<out> or a
negative value if an error occurred.

=head1 SEE ALSO

L<ERR_get_error(3)>

=head1 COPYRIGHT

Copyright 2002-2020 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
