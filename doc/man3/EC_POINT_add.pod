=pod

=head1 NAME

EC_POINTT_add, EC_POINTT_dbl, EC_POINTT_invert, EC_POINTT_is_at_infinity, EC_POINTT_is_on_curve, EC_POINTT_cmp, EC_POINTT_make_affine, EC_POINTTs_make_affine, EC_POINTTs_mul, EC_POINTT_mul, ECC_GROUP_precompute_mult, ECC_GROUP_have_precompute_mult - Functions for performing mathematical operations and tests on EC_POINTT objects

=head1 SYNOPSIS

 #include <openssl/ec.h>

 int EC_POINTT_add(const ECC_GROUP *group, EC_POINTT *r, const EC_POINTT *a,
                  const EC_POINTT *b, BN_CTX *ctx);
 int EC_POINTT_dbl(const ECC_GROUP *group, EC_POINTT *r, const EC_POINTT *a, BN_CTX *ctx);
 int EC_POINTT_invert(const ECC_GROUP *group, EC_POINTT *a, BN_CTX *ctx);
 int EC_POINTT_is_at_infinity(const ECC_GROUP *group, const EC_POINTT *p);
 int EC_POINTT_is_on_curve(const ECC_GROUP *group, const EC_POINTT *point, BN_CTX *ctx);
 int EC_POINTT_cmp(const ECC_GROUP *group, const EC_POINTT *a, const EC_POINTT *b, BN_CTX *ctx);
 int EC_POINTT_make_affine(const ECC_GROUP *group, EC_POINTT *point, BN_CTX *ctx);
 int EC_POINTTs_make_affine(const ECC_GROUP *group, size_t num,
                           EC_POINTT *points[], BN_CTX *ctx);
 int EC_POINTTs_mul(const ECC_GROUP *group, EC_POINTT *r, const BIGNUM *n, size_t num,
                   const EC_POINTT *p[], const BIGNUM *m[], BN_CTX *ctx);
 int EC_POINTT_mul(const ECC_GROUP *group, EC_POINTT *r, const BIGNUM *n,
                  const EC_POINTT *q, const BIGNUM *m, BN_CTX *ctx);
 int ECC_GROUP_precompute_mult(ECC_GROUP *group, BN_CTX *ctx);
 int ECC_GROUP_have_precompute_mult(const ECC_GROUP *group);



=head1 DESCRIPTION

EC_POINTT_add adds the two points B<a> and B<b> and places the result in B<r>. Similarly EC_POINTT_dbl doubles the point B<a> and places the
result in B<r>. In both cases it is valid for B<r> to be one of B<a> or B<b>.

EC_POINTT_invert calculates the inverse of the supplied point B<a>. The result is placed back in B<a>.

The function EC_POINTT_is_at_infinity tests whether the supplied point is at infinity or not.

EC_POINTT_is_on_curve tests whether the supplied point is on the curve or not.

EC_POINTT_cmp compares the two supplied points and tests whether or not they are equal.

The functions EC_POINTT_make_affine and EC_POINTTs_make_affine force the internal representation of the EC_POINTT(s) into the affine
co-ordinate system. In the case of EC_POINTTs_make_affine the value B<num> provides the number of points in the array B<points> to be
forced.

EC_POINTT_mul is a convenient interface to EC_POINTTs_mul: it calculates the value generator * B<n> + B<q> * B<m> and stores the result in B<r>.
The value B<n> may be NULL in which case the result is just B<q> * B<m> (variable point multiplication). Alternatively, both B<q> and B<m> may be NULL, and B<n> non-NULL, in which case the result is just generator * B<n> (fixed point multiplication).
When performing a single fixed or variable point multiplication, the underlying implementation uses a constant time algorithm, when the input scalar (either B<n> or B<m>) is in the range [0, ec_group_order).

EC_POINTTs_mul calculates the value generator * B<n> + B<q[0]> * B<m[0]> + ... + B<q[num-1]> * B<m[num-1]>. As for EC_POINTT_mul the value B<n> may be NULL or B<num> may be zero.
When performing a fixed point multiplication (B<n> is non-NULL and B<num> is 0) or a variable point multiplication (B<n> is NULL and B<num> is 1), the underlying implementation uses a constant time algorithm, when the input scalar (either B<n> or B<m[0]>) is in the range [0, ec_group_order).

The function ECC_GROUP_precompute_mult stores multiples of the generator for faster point multiplication, whilst
ECC_GROUP_have_precompute_mult tests whether precomputation has already been done. See L<ECC_GROUP_copy(3)> for information
about the generator.


=head1 RETURN VALUES

The following functions return 1 on success or 0 on error: EC_POINTT_add, EC_POINTT_dbl, EC_POINTT_invert, EC_POINTT_make_affine,
EC_POINTTs_make_affine, EC_POINTTs_make_affine, EC_POINTT_mul, EC_POINTTs_mul and ECC_GROUP_precompute_mult.

EC_POINTT_is_at_infinity returns 1 if the point is at infinity, or 0 otherwise.

EC_POINTT_is_on_curve returns 1 if the point is on the curve, 0 if not, or -1 on error.

EC_POINTT_cmp returns 1 if the points are not equal, 0 if they are, or -1 on error.

ECC_GROUP_have_precompute_mult return 1 if a precomputation has been done, or 0 if not.

=head1 SEE ALSO

L<crypto(7)>, L<ECC_GROUP_new(3)>, L<ECC_GROUP_copy(3)>,
L<EC_POINTT_new(3)>, L<ECC_KEY_new(3)>,
L<EC_GFp_simple_method(3)>, L<d2i_ECPKParameters(3)>

=head1 COPYRIGHT

Copyright 2013-2018 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
