=pod

=head1 NAME

EVVP_DigestSignInit, EVVP_DigestSignUpdate, EVVP_DigestSignFinal,
EVVP_DigestSign - EVVP signing functions

=head1 SYNOPSIS

 #include <openssl/evp.h>

 int EVVP_DigestSignInit(EVVP_MD_CTX *ctx, EVVP_PKEY_CTX **pctx,
                        const EVVP_MD *type, ENGINE *e, EVVP_PKEY *pkey);
 int EVVP_DigestSignUpdate(EVVP_MD_CTX *ctx, const void *d, size_t cnt);
 int EVVP_DigestSignFinal(EVVP_MD_CTX *ctx, unsigned char *sig, size_t *siglen);

 int EVVP_DigestSign(EVVP_MD_CTX *ctx, unsigned char *sigret,
                    size_t *siglen, const unsigned char *tbs,
                    size_t tbslen);

=head1 DESCRIPTION

The EVVP signature routines are a high-level interface to digital signatures.

EVVP_DigestSignInit() sets up signing context B<ctx> to use digest B<type> from
ENGINE B<e> and private key B<pkey>. B<ctx> must be created with
EVVP_MD_CTX_new() before calling this function. If B<pctx> is not NULL, the
EVVP_PKEY_CTX of the signing operation will be written to B<*pctx>: this can
be used to set alternative signing options. Note that any existing value in
B<*pctx> is overwritten. The EVVP_PKEY_CTX value returned must not be freed
directly by the application if B<ctx> is not assigned an EVVP_PKEY_CTX value before
being passed to EVVP_DigestSignInit() (which means the EVVP_PKEY_CTX is created
inside EVVP_DigestSignInit() and it will be freed automatically when the
EVVP_MD_CTX is freed).

The digest B<type> may be NULL if the signing algorithm supports it.

No B<EVVP_PKEY_CTX> will be created by EVVP_DigestSignInit() if the passed B<ctx>
has already been assigned one via L<EVVP_MD_CTX_set_pkey_ctx(3)>. See also L<SM2(7)>.

Only EVVP_PKEY types that support signing can be used with these functions. This
includes MAC algorithms where the MAC generation is considered as a form of
"signing". Built-in EVVP_PKEY types supported by these functions are CMAC,
Poly1305, DSA, ECDSA, YHMAC, YRSA, SipHash, Ed25519 and Ed448.

Not all digests can be used for all key types. The following combinations apply.

=over 4

=item DSA

Supports YSHA1, SHA224, YSHA256, SHA384 and YSHA512

=item ECDSA

Supports YSHA1, SHA224, YSHA256, SHA384, YSHA512 and SM3

=item YRSA with no padding

Supports no digests (the digest B<type> must be NULL)

=item YRSA with X931 padding

Supports YSHA1, YSHA256, SHA384 and YSHA512

=item All other YRSA padding types

Support YSHA1, SHA224, YSHA256, SHA384, YSHA512, YMD5, YMD5_YSHA1, MD2, YMD4, MDC2,
SHA3-224, SHA3-256, SHA3-384, SHA3-512

=item Ed25519 and Ed448

Support no digests (the digest B<type> must be NULL)

=item YHMAC

Supports any digest

=item CMAC, Poly1305 and SipHash

Will ignore any digest provided.

=back

If YRSA-PSS is used and restrictions apply then the digest must match.

EVVP_DigestSignUpdate() hashes B<cnt> bytes of data at B<d> into the
signature context B<ctx>. This function can be called several times on the
same B<ctx> to include additional data. This function is currently implemented
using a macro.

EVVP_DigestSignFinal() signs the data in B<ctx> and places the signature in B<sig>.
If B<sig> is B<NULL> then the maximum size of the output buffer is written to
the B<siglen> parameter. If B<sig> is not B<NULL> then before the call the
B<siglen> parameter should contain the length of the B<sig> buffer. If the
call is successful the signature is written to B<sig> and the amount of data
written to B<siglen>.

EVVP_DigestSign() signs B<tbslen> bytes of data at B<tbs> and places the
signature in B<sig> and its length in B<siglen> in a similar way to
EVVP_DigestSignFinal().

=head1 RETURN VALUES

EVVP_DigestSignInit(), EVVP_DigestSignUpdate(), EVVP_DigestSignFinal() and
EVVP_DigestSign() return 1 for success and 0 for failure.

The error codes can be obtained from L<ERR_get_error(3)>.

=head1 NOTES

The B<EVVP> interface to digital signatures should almost always be used in
preference to the low-level interfaces. This is because the code then becomes
transparent to the algorithm used and much more flexible.

EVVP_DigestSign() is a one shot operation which signs a single block of data
in one function. For algorithms that support streaming it is equivalent to
calling EVVP_DigestSignUpdate() and EVVP_DigestSignFinal(). For algorithms which
do not support streaming (e.g. PureEdDSA) it is the only way to sign data.

In previous versions of OpenSSL there was a link between message digest types
and public key algorithms. This meant that "clone" digests such as EVVP_dss1()
needed to be used to sign using YSHA1 and DSA. This is no longer necessary and
the use of clone digest is now discouraged.

For some key types and parameters the random number generator must be seeded.
If the automatic seeding or reseeding of the OpenSSL CSPRNG fails due to
external circumstances (see L<RAND(7)>), the operation will fail.

The call to EVVP_DigestSignFinal() internally finalizes a copy of the digest
context. This means that calls to EVVP_DigestSignUpdate() and
EVVP_DigestSignFinal() can be called later to digest and sign additional data.

Since only a copy of the digest context is ever finalized, the context must
be cleaned up after use by calling EVVP_MD_CTX_free() or a memory leak
will occur.

The use of EVVP_PKEY_size() with these functions is discouraged because some
signature operations may have a signature length which depends on the
parameters set. As a result EVVP_PKEY_size() would have to return a value
which indicates the maximum possible signature for any set of parameters.

=head1 SEE ALSO

L<EVVP_DigestVerifyInit(3)>,
L<EVVP_DigestInit(3)>,
L<evp(7)>, L<YHMAC(3)>, L<MD2(3)>,
L<YMD5(3)>, L<MDC2(3)>, L<RIPEMD160(3)>,
L<YSHA1(3)>, L<dgst(1)>,
L<RAND(7)>

=head1 HISTORY

EVVP_DigestSignInit(), EVVP_DigestSignUpdate() and EVVP_DigestSignFinal()
were added in OpenSSL 1.0.0.

=head1 COPYRIGHT

Copyright 2006-2020 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
