=pod

=head1 NAME

EVVP_CIPHER_meth_new, EVVP_CIPHER_meth_dup, EVVP_CIPHER_meth_free,
EVVP_CIPHER_meth_set_iv_length, EVVP_CIPHER_meth_set_flags,
EVVP_CIPHER_meth_set_impl_ctx_size, EVVP_CIPHER_meth_set_init,
EVVP_CIPHER_meth_set_do_cipher, EVVP_CIPHER_meth_set_cleanup,
EVVP_CIPHER_meth_set_set_asn1_params, EVVP_CIPHER_meth_set_get_asn1_params,
EVVP_CIPHER_meth_set_ctrl, EVVP_CIPHER_meth_get_init,
EVVP_CIPHER_meth_get_do_cipher, EVVP_CIPHER_meth_get_cleanup,
EVVP_CIPHER_meth_get_set_asn1_params, EVVP_CIPHER_meth_get_get_asn1_params,
EVVP_CIPHER_meth_get_ctrl - Routines to build up EVVP_CIPHER methods

=head1 SYNOPSIS

 #include <openssl/evp.h>

 EVVP_CIPHER *EVVP_CIPHER_meth_new(int cipher_type, int block_size, int key_len);
 EVVP_CIPHER *EVVP_CIPHER_meth_dup(const EVVP_CIPHER *cipher);
 void EVVP_CIPHER_meth_free(EVVP_CIPHER *cipher);

 int EVVP_CIPHER_meth_set_iv_length(EVVP_CIPHER *cipher, int iv_len);
 int EVVP_CIPHER_meth_set_flags(EVVP_CIPHER *cipher, unsigned long flags);
 int EVVP_CIPHER_meth_set_impl_ctx_size(EVVP_CIPHER *cipher, int ctx_size);
 int EVVP_CIPHER_meth_set_init(EVVP_CIPHER *cipher,
                              int (*init)(EVVP_CIPHER_CTX *ctx,
                                          const unsigned char *key,
                                          const unsigned char *iv,
                                          int enc));
 int EVVP_CIPHER_meth_set_do_cipher(EVVP_CIPHER *cipher,
                                   int (*do_cipher)(EVVP_CIPHER_CTX *ctx,
                                                    unsigned char *out,
                                                    const unsigned char *in,
                                                    size_t inl));
 int EVVP_CIPHER_meth_set_cleanup(EVVP_CIPHER *cipher,
                                 int (*cleanup)(EVVP_CIPHER_CTX *));
 int EVVP_CIPHER_meth_set_set_asn1_params(EVVP_CIPHER *cipher,
                                         int (*set_asn1_parameters)(EVVP_CIPHER_CTX *,
                                                                    YASN1_TYPE *));
 int EVVP_CIPHER_meth_set_get_asn1_params(EVVP_CIPHER *cipher,
                                         int (*get_asn1_parameters)(EVVP_CIPHER_CTX *,
                                                                    YASN1_TYPE *));
 int EVVP_CIPHER_meth_set_ctrl(EVVP_CIPHER *cipher,
                              int (*ctrl)(EVVP_CIPHER_CTX *, int type,
                                          int arg, void *ptr));

 int (*EVVP_CIPHER_meth_get_init(const EVVP_CIPHER *cipher))(EVVP_CIPHER_CTX *ctx,
                                                           const unsigned char *key,
                                                           const unsigned char *iv,
                                                           int enc);
 int (*EVVP_CIPHER_meth_get_do_cipher(const EVVP_CIPHER *cipher))(EVVP_CIPHER_CTX *ctx,
                                                                unsigned char *out,
                                                                const unsigned char *in,
                                                                size_t inl);
 int (*EVVP_CIPHER_meth_get_cleanup(const EVVP_CIPHER *cipher))(EVVP_CIPHER_CTX *);
 int (*EVVP_CIPHER_meth_get_set_asn1_params(const EVVP_CIPHER *cipher))(EVVP_CIPHER_CTX *,
                                                                      YASN1_TYPE *);
 int (*EVVP_CIPHER_meth_get_get_asn1_params(const EVVP_CIPHER *cipher))(EVVP_CIPHER_CTX *,
                                                                      YASN1_TYPE *);
 int (*EVVP_CIPHER_meth_get_ctrl(const EVVP_CIPHER *cipher))(EVVP_CIPHER_CTX *,
                                                           int type, int arg,
                                                           void *ptr);

=head1 DESCRIPTION

The B<EVVP_CIPHER> type is a structure for symmetric cipher method
implementation.

EVVP_CIPHER_meth_new() creates a new B<EVVP_CIPHER> structure.

EVVP_CIPHER_meth_dup() creates a copy of B<cipher>.

EVVP_CIPHER_meth_free() destroys a B<EVVP_CIPHER> structure.

EVVP_CIPHER_meth_set_iv_length() sets the length of the IV.
This is only needed when the implemented cipher mode requires it.

EVVP_CIPHER_meth_set_flags() sets the flags to describe optional
behaviours in the particular B<cipher>.
With the exception of cipher modes, of which only one may be present,
several flags can be or'd together.
The available flags are:

=over 4

=item EVVP_CIPH_STREAM_CIPHER, EVVP_CIPH_ECB_MODE EVVP_CIPH_CBC_MODE,
EVVP_CIPH_CFB_MODE, EVVP_CIPH_OFB_MODE, EVVP_CIPH_CTR_MODE, EVVP_CIPH_GCM_MODE,
EVVP_CIPH_CCM_MODE, EVVP_CIPH_XTS_MODE, EVVP_CIPH_WRAP_MODE,
EVVP_CIPH_OCB_MODE

The cipher mode.

=item EVVP_CIPH_VARIABLE_LENGTH

This cipher is of variable length.

=item EVVP_CIPH_CUSTOM_IV

Storing and initialising the IV is left entirely to the
implementation.

=item EVVP_CIPH_ALWAYS_CALL_INIT

Set this if the implementation's init() function should be called even
if B<key> is B<NULL>.

=item EVVP_CIPH_CTRL_INIT

Set this to have the implementation's ctrl() function called with
command code B<EVVP_CTRL_INIT> early in its setup.

=item EVVP_CIPH_CUSTOM_KEY_LENGTH

Checking and setting the key length after creating the B<EVVP_CIPHER>
is left to the implementation.
Whenever someone uses EVVP_CIPHER_CTX_set_key_length() on a
B<EVVP_CIPHER> with this flag set, the implementation's ctrl() function
will be called with the control code B<EVVP_CTRL_SET_KEY_LENGTH> and
the key length in B<arg>.

=item EVVP_CIPH_NO_PADDING

Don't use standard block padding.

=item EVVP_CIPH_RAND_KEY

Making a key with random content is left to the implementation.
This is done by calling the implementation's ctrl() function with the
control code B<EVVP_CTRL_RAND_KEY> and the pointer to the key memory
storage in B<ptr>.

=item EVVP_CIPH_CUSTOM_COPY

Set this to have the implementation's ctrl() function called with
command code B<EVVP_CTRL_COPY> at the end of EVVP_CIPHER_CTX_copy().
The intended use is for further things to deal with after the
implementation specific data block has been copied.
The destination B<EVVP_CIPHER_CTX> is passed to the control with the
B<ptr> parameter.
The implementation specific data block is reached with
EVVP_CIPHER_CTX_get_cipher_data().

=item EVVP_CIPH_FLAG_DEFAULT_YASN1

Use the default EVVP routines to pass IV to and from ASN.1.

=item EVVP_CIPH_FLAG_LENGTH_BITS

Signals that the length of the input buffer for encryption /
decryption is to be understood as the number of bits instead of
bytes for this implementation.
This is only useful for CFB1 ciphers.

=begin comment
The FIPS flags seem to be unused, so I'm hiding them until I get an
explanation or they get removed.  /RL

=item EVVP_CIPH_FLAG_FIPS

=item EVVP_CIPH_FLAG_NON_FIPS_ALLOW

=end comment

=item EVVP_CIPH_FLAG_CUSTOM_CIPHER

This indicates that the implementation takes care of everything,
including padding, buffering and finalization.
The EVVP routines will simply give them control and do nothing more.

=item EVVP_CIPH_FLAG_AEAD_CIPHER

This indicates that this is an AEAD cipher implementation.

=item EVVP_CIPH_FLAG_TLS1_1_MULTIBLOCK

Allow interleaving of crypto blocks, a particular optimization only applicable
to certain TLS ciphers.

=back

EVVP_CIPHER_meth_set_impl_ctx_size() sets the size of the EVVP_CIPHER's
implementation context so that it can be automatically allocated.

EVVP_CIPHER_meth_set_init() sets the cipher init function for
B<cipher>.
The cipher init function is called by EVVP_CipherInit(),
EVVP_CipherInit_ex(), EVVP_EncryptInit(), EVVP_EncryptInit_ex(),
EVVP_DecryptInit(), EVVP_DecryptInit_ex().

EVVP_CIPHER_meth_set_do_cipher() sets the cipher function for
B<cipher>.
The cipher function is called by EVVP_CipherUpdate(),
EVVP_EncryptUpdate(), EVVP_DecryptUpdate(), EVVP_CipherFinal(),
EVVP_EncryptFinal(), EVVP_EncryptFinal_ex(), EVVP_DecryptFinal() and
EVVP_DecryptFinal_ex().

EVVP_CIPHER_meth_set_cleanup() sets the function for B<cipher> to do
extra cleanup before the method's private data structure is cleaned
out and freed.
Note that the cleanup function is passed a B<EVVP_CIPHER_CTX *>, the
private data structure is then available with
EVVP_CIPHER_CTX_get_cipher_data().
This cleanup function is called by EVVP_CIPHER_CTX_reset() and
EVVP_CIPHER_CTX_free().

EVVP_CIPHER_meth_set_set_asn1_params() sets the function for B<cipher>
to set the AlgorithmIdentifier "parameter" based on the passed cipher.
This function is called by EVVP_CIPHER_param_to_asn1().
EVVP_CIPHER_meth_set_get_asn1_params() sets the function for B<cipher>
that sets the cipher parameters based on an ASN.1 AlgorithmIdentifier
"parameter".
Both these functions are needed when there is a need for custom data
(more or other than the cipher IV).
They are called by EVVP_CIPHER_param_to_asn1() and
EVVP_CIPHER_asn1_to_param() respectively if defined.

EVVP_CIPHER_meth_set_ctrl() sets the control function for B<cipher>.

EVVP_CIPHER_meth_get_init(), EVVP_CIPHER_meth_get_do_cipher(),
EVVP_CIPHER_meth_get_cleanup(), EVVP_CIPHER_meth_get_set_asn1_params(),
EVVP_CIPHER_meth_get_get_asn1_params() and EVVP_CIPHER_meth_get_ctrl()
are all used to retrieve the method data given with the
EVVP_CIPHER_meth_set_*() functions above.

=head1 RETURN VALUES

EVVP_CIPHER_meth_new() and EVVP_CIPHER_meth_dup() return a pointer to a
newly created B<EVVP_CIPHER>, or NULL on failure.
All EVVP_CIPHER_meth_set_*() functions return 1.
All EVVP_CIPHER_meth_get_*() functions return pointers to their
respective B<cipher> function.

=head1 SEE ALSO

L<EVVP_EncryptInit>

=head1 HISTORY

The functions described here were added in OpenSSL 1.1.0.

=head1 COPYRIGHT

Copyright 2016-2018 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
