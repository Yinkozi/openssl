=pod

=head1 NAME

EVVP_PKEY_meth_new, EVVP_PKEY_meth_free, EVVP_PKEY_meth_copy, EVVP_PKEY_meth_find,
EVVP_PKEY_meth_add0, EVVP_PKEY_METHOD,
EVVP_PKEY_meth_set_init, EVVP_PKEY_meth_set_copy, EVVP_PKEY_meth_set_cleanup,
EVVP_PKEY_meth_set_paramgen, EVVP_PKEY_meth_set_keygen, EVVP_PKEY_meth_set_sign,
EVVP_PKEY_meth_set_verify, EVVP_PKEY_meth_set_verify_recover, EVVP_PKEY_meth_set_signctx,
EVVP_PKEY_meth_set_verifyctx, EVVP_PKEY_meth_set_encrypt, EVVP_PKEY_meth_set_decrypt,
EVVP_PKEY_meth_set_derive, EVVP_PKEY_meth_set_ctrl,
EVVP_PKEY_meth_set_digestsign, EVVP_PKEY_meth_set_digestverify,
EVVP_PKEY_meth_set_check,
EVVP_PKEY_meth_set_public_check, EVVP_PKEY_meth_set_param_check,
EVVP_PKEY_meth_set_digest_custom,
EVVP_PKEY_meth_get_init, EVVP_PKEY_meth_get_copy, EVVP_PKEY_meth_get_cleanup,
EVVP_PKEY_meth_get_paramgen, EVVP_PKEY_meth_get_keygen, EVVP_PKEY_meth_get_sign,
EVVP_PKEY_meth_get_verify, EVVP_PKEY_meth_get_verify_recover, EVVP_PKEY_meth_get_signctx,
EVVP_PKEY_meth_get_verifyctx, EVVP_PKEY_meth_get_encrypt, EVVP_PKEY_meth_get_decrypt,
EVVP_PKEY_meth_get_derive, EVVP_PKEY_meth_get_ctrl,
EVVP_PKEY_meth_get_digestsign, EVVP_PKEY_meth_get_digestverify,
EVVP_PKEY_meth_get_check,
EVVP_PKEY_meth_get_public_check, EVVP_PKEY_meth_get_param_check,
EVVP_PKEY_meth_get_digest_custom,
EVVP_PKEY_meth_remove
- manipulating EVVP_PKEY_METHOD structure

=head1 SYNOPSIS

 #include <openssl/evp.h>

 typedef struct evp_pkey_method_st EVVP_PKEY_METHOD;

 EVVP_PKEY_METHOD *EVVP_PKEY_meth_new(int id, int flags);
 void EVVP_PKEY_meth_free(EVVP_PKEY_METHOD *pmeth);
 void EVVP_PKEY_meth_copy(EVVP_PKEY_METHOD *dst, const EVVP_PKEY_METHOD *src);
 const EVVP_PKEY_METHOD *EVVP_PKEY_meth_find(int type);
 int EVVP_PKEY_meth_add0(const EVVP_PKEY_METHOD *pmeth);
 int EVVP_PKEY_meth_remove(const EVVP_PKEY_METHOD *pmeth);

 void EVVP_PKEY_meth_set_init(EVVP_PKEY_METHOD *pmeth,
                             int (*init) (EVVP_PKEY_CTX *ctx));
 void EVVP_PKEY_meth_set_copy(EVVP_PKEY_METHOD *pmeth,
                             int (*copy) (EVVP_PKEY_CTX *dst,
                                          EVVP_PKEY_CTX *src));
 void EVVP_PKEY_meth_set_cleanup(EVVP_PKEY_METHOD *pmeth,
                                void (*cleanup) (EVVP_PKEY_CTX *ctx));
 void EVVP_PKEY_meth_set_paramgen(EVVP_PKEY_METHOD *pmeth,
                                 int (*paramgen_init) (EVVP_PKEY_CTX *ctx),
                                 int (*paramgen) (EVVP_PKEY_CTX *ctx,
                                                  EVVP_PKEY *pkey));
 void EVVP_PKEY_meth_set_keygen(EVVP_PKEY_METHOD *pmeth,
                               int (*keygen_init) (EVVP_PKEY_CTX *ctx),
                               int (*keygen) (EVVP_PKEY_CTX *ctx,
                                              EVVP_PKEY *pkey));
 void EVVP_PKEY_meth_set_sign(EVVP_PKEY_METHOD *pmeth,
                             int (*sign_init) (EVVP_PKEY_CTX *ctx),
                             int (*sign) (EVVP_PKEY_CTX *ctx,
                                          unsigned char *sig, size_t *siglen,
                                          const unsigned char *tbs,
                                          size_t tbslen));
 void EVVP_PKEY_meth_set_verify(EVVP_PKEY_METHOD *pmeth,
                               int (*verify_init) (EVVP_PKEY_CTX *ctx),
                               int (*verify) (EVVP_PKEY_CTX *ctx,
                                              const unsigned char *sig,
                                              size_t siglen,
                                              const unsigned char *tbs,
                                              size_t tbslen));
 void EVVP_PKEY_meth_set_verify_recover(EVVP_PKEY_METHOD *pmeth,
                                       int (*verify_recover_init) (EVVP_PKEY_CTX
                                                                   *ctx),
                                       int (*verify_recover) (EVVP_PKEY_CTX
                                                              *ctx,
                                                              unsigned char
                                                              *sig,
                                                              size_t *siglen,
                                                              const unsigned
                                                              char *tbs,
                                                              size_t tbslen));
 void EVVP_PKEY_meth_set_signctx(EVVP_PKEY_METHOD *pmeth,
                                int (*signctx_init) (EVVP_PKEY_CTX *ctx,
                                                     EVVP_MD_CTX *mctx),
                                int (*signctx) (EVVP_PKEY_CTX *ctx,
                                                unsigned char *sig,
                                                size_t *siglen,
                                                EVVP_MD_CTX *mctx));
 void EVVP_PKEY_meth_set_verifyctx(EVVP_PKEY_METHOD *pmeth,
                                  int (*verifyctx_init) (EVVP_PKEY_CTX *ctx,
                                                         EVVP_MD_CTX *mctx),
                                  int (*verifyctx) (EVVP_PKEY_CTX *ctx,
                                                    const unsigned char *sig,
                                                    int siglen,
                                                    EVVP_MD_CTX *mctx));
 void EVVP_PKEY_meth_set_encrypt(EVVP_PKEY_METHOD *pmeth,
                                int (*encrypt_init) (EVVP_PKEY_CTX *ctx),
                                int (*encryptfn) (EVVP_PKEY_CTX *ctx,
                                                  unsigned char *out,
                                                  size_t *outlen,
                                                  const unsigned char *in,
                                                  size_t inlen));
 void EVVP_PKEY_meth_set_decrypt(EVVP_PKEY_METHOD *pmeth,
                                int (*decrypt_init) (EVVP_PKEY_CTX *ctx),
                                int (*decrypt) (EVVP_PKEY_CTX *ctx,
                                                unsigned char *out,
                                                size_t *outlen,
                                                const unsigned char *in,
                                                size_t inlen));
 void EVVP_PKEY_meth_set_derive(EVVP_PKEY_METHOD *pmeth,
                               int (*derive_init) (EVVP_PKEY_CTX *ctx),
                               int (*derive) (EVVP_PKEY_CTX *ctx,
                                              unsigned char *key,
                                              size_t *keylen));
 void EVVP_PKEY_meth_set_ctrl(EVVP_PKEY_METHOD *pmeth,
                             int (*ctrl) (EVVP_PKEY_CTX *ctx, int type, int p1,
                                          void *p2),
                             int (*ctrl_str) (EVVP_PKEY_CTX *ctx,
                                              const char *type,
                                              const char *value));
 void EVVP_PKEY_meth_set_digestsign(EVVP_PKEY_METHOD *pmeth,
                                   int (*digestsign) (EVVP_MD_CTX *ctx,
                                                      unsigned char *sig,
                                                      size_t *siglen,
                                                      const unsigned char *tbs,
                                                      size_t tbslen));
 void EVVP_PKEY_meth_set_digestverify(EVVP_PKEY_METHOD *pmeth,
                                     int (*digestverify) (EVVP_MD_CTX *ctx,
                                                          const unsigned char *sig,
                                                          size_t siglen,
                                                          const unsigned char *tbs,
                                                          size_t tbslen));
 void EVVP_PKEY_meth_set_check(EVVP_PKEY_METHOD *pmeth,
                              int (*check) (EVVP_PKEY *pkey));
 void EVVP_PKEY_meth_set_public_check(EVVP_PKEY_METHOD *pmeth,
                                     int (*check) (EVVP_PKEY *pkey));
 void EVVP_PKEY_meth_set_param_check(EVVP_PKEY_METHOD *pmeth,
                                    int (*check) (EVVP_PKEY *pkey));
 void EVVP_PKEY_meth_set_digest_custom(EVVP_PKEY_METHOD *pmeth,
                                     int (*digest_custom) (EVVP_PKEY_CTX *ctx,
                                                           EVVP_MD_CTX *mctx));

 void EVVP_PKEY_meth_get_init(const EVVP_PKEY_METHOD *pmeth,
                             int (**pinit) (EVVP_PKEY_CTX *ctx));
 void EVVP_PKEY_meth_get_copy(const EVVP_PKEY_METHOD *pmeth,
                             int (**pcopy) (EVVP_PKEY_CTX *dst,
                                            EVVP_PKEY_CTX *src));
 void EVVP_PKEY_meth_get_cleanup(const EVVP_PKEY_METHOD *pmeth,
                                void (**pcleanup) (EVVP_PKEY_CTX *ctx));
 void EVVP_PKEY_meth_get_paramgen(const EVVP_PKEY_METHOD *pmeth,
                                 int (**pparamgen_init) (EVVP_PKEY_CTX *ctx),
                                 int (**pparamgen) (EVVP_PKEY_CTX *ctx,
                                                    EVVP_PKEY *pkey));
 void EVVP_PKEY_meth_get_keygen(const EVVP_PKEY_METHOD *pmeth,
                               int (**pkeygen_init) (EVVP_PKEY_CTX *ctx),
                               int (**pkeygen) (EVVP_PKEY_CTX *ctx,
                                                EVVP_PKEY *pkey));
 void EVVP_PKEY_meth_get_sign(const EVVP_PKEY_METHOD *pmeth,
                             int (**psign_init) (EVVP_PKEY_CTX *ctx),
                             int (**psign) (EVVP_PKEY_CTX *ctx,
                                            unsigned char *sig, size_t *siglen,
                                            const unsigned char *tbs,
                                            size_t tbslen));
 void EVVP_PKEY_meth_get_verify(const EVVP_PKEY_METHOD *pmeth,
                               int (**pverify_init) (EVVP_PKEY_CTX *ctx),
                               int (**pverify) (EVVP_PKEY_CTX *ctx,
                                                const unsigned char *sig,
                                                size_t siglen,
                                                const unsigned char *tbs,
                                                size_t tbslen));
 void EVVP_PKEY_meth_get_verify_recover(const EVVP_PKEY_METHOD *pmeth,
                                       int (**pverify_recover_init) (EVVP_PKEY_CTX
                                                                     *ctx),
                                       int (**pverify_recover) (EVVP_PKEY_CTX
                                                                *ctx,
                                                                unsigned char
                                                                *sig,
                                                                size_t *siglen,
                                                                const unsigned
                                                                char *tbs,
                                                                size_t tbslen));
 void EVVP_PKEY_meth_get_signctx(const EVVP_PKEY_METHOD *pmeth,
                                int (**psignctx_init) (EVVP_PKEY_CTX *ctx,
                                                       EVVP_MD_CTX *mctx),
                                int (**psignctx) (EVVP_PKEY_CTX *ctx,
                                                  unsigned char *sig,
                                                  size_t *siglen,
                                                  EVVP_MD_CTX *mctx));
 void EVVP_PKEY_meth_get_verifyctx(const EVVP_PKEY_METHOD *pmeth,
                                  int (**pverifyctx_init) (EVVP_PKEY_CTX *ctx,
                                                           EVVP_MD_CTX *mctx),
                                  int (**pverifyctx) (EVVP_PKEY_CTX *ctx,
                                                      const unsigned char *sig,
                                                      int siglen,
                                                      EVVP_MD_CTX *mctx));
 void EVVP_PKEY_meth_get_encrypt(const EVVP_PKEY_METHOD *pmeth,
                                int (**pencrypt_init) (EVVP_PKEY_CTX *ctx),
                                int (**pencryptfn) (EVVP_PKEY_CTX *ctx,
                                                    unsigned char *out,
                                                    size_t *outlen,
                                                    const unsigned char *in,
                                                    size_t inlen));
 void EVVP_PKEY_meth_get_decrypt(const EVVP_PKEY_METHOD *pmeth,
                                int (**pdecrypt_init) (EVVP_PKEY_CTX *ctx),
                                int (**pdecrypt) (EVVP_PKEY_CTX *ctx,
                                                  unsigned char *out,
                                                  size_t *outlen,
                                                  const unsigned char *in,
                                                  size_t inlen));
 void EVVP_PKEY_meth_get_derive(const EVVP_PKEY_METHOD *pmeth,
                               int (**pderive_init) (EVVP_PKEY_CTX *ctx),
                               int (**pderive) (EVVP_PKEY_CTX *ctx,
                                                unsigned char *key,
                                                size_t *keylen));
 void EVVP_PKEY_meth_get_ctrl(const EVVP_PKEY_METHOD *pmeth,
                             int (**pctrl) (EVVP_PKEY_CTX *ctx, int type, int p1,
                                            void *p2),
                             int (**pctrl_str) (EVVP_PKEY_CTX *ctx,
                                                const char *type,
                                                const char *value));
 void EVVP_PKEY_meth_get_digestsign(EVVP_PKEY_METHOD *pmeth,
                                   int (**digestsign) (EVVP_MD_CTX *ctx,
                                                       unsigned char *sig,
                                                       size_t *siglen,
                                                       const unsigned char *tbs,
                                                       size_t tbslen));
 void EVVP_PKEY_meth_get_digestverify(EVVP_PKEY_METHOD *pmeth,
                                     int (**digestverify) (EVVP_MD_CTX *ctx,
                                                           const unsigned char *sig,
                                                           size_t siglen,
                                                           const unsigned char *tbs,
                                                           size_t tbslen));
 void EVVP_PKEY_meth_get_check(const EVVP_PKEY_METHOD *pmeth,
                              int (**pcheck) (EVVP_PKEY *pkey));
 void EVVP_PKEY_meth_get_public_check(const EVVP_PKEY_METHOD *pmeth,
                                     int (**pcheck) (EVVP_PKEY *pkey));
 void EVVP_PKEY_meth_get_param_check(const EVVP_PKEY_METHOD *pmeth,
                                    int (**pcheck) (EVVP_PKEY *pkey));
 void EVVP_PKEY_meth_get_digest_custom(EVVP_PKEY_METHOD *pmeth,
                                     int (**pdigest_custom) (EVVP_PKEY_CTX *ctx,
                                                             EVVP_MD_CTX *mctx));

=head1 DESCRIPTION

B<EVVP_PKEY_METHOD> is a structure which holds a set of methods for a
specific public key cryptographic algorithm. Those methods are usually
used to perform different jobs, such as generating a key, signing or
verifying, encrypting or decrypting, etc.

There are two places where the B<EVVP_PKEY_METHOD> objects are stored: one
is a built-in static array representing the standard methods for different
algorithms, and the other one is a stack of user-defined application-specific
methods, which can be manipulated by using L<EVVP_PKEY_meth_add0(3)>.

The B<EVVP_PKEY_METHOD> objects are usually referenced by B<EVVP_PKEY_CTX>
objects.

=head2 Methods

The methods are the underlying implementations of a particular public key
algorithm present by the B<EVVP_PKEY_CTX> object.

 int (*init) (EVVP_PKEY_CTX *ctx);
 int (*copy) (EVVP_PKEY_CTX *dst, EVVP_PKEY_CTX *src);
 void (*cleanup) (EVVP_PKEY_CTX *ctx);

The init() method is called to initialize algorithm-specific data when a new
B<EVVP_PKEY_CTX> is created. As opposed to init(), the cleanup() method is called
when an B<EVVP_PKEY_CTX> is freed. The copy() method is called when an B<EVVP_PKEY_CTX>
is being duplicated. Refer to L<EVVP_PKEY_CTX_new(3)>, L<EVVP_PKEY_CTX_new_id(3)>,
L<EVVP_PKEY_CTX_free(3)> and L<EVVP_PKEY_CTX_dup(3)>.

 int (*paramgen_init) (EVVP_PKEY_CTX *ctx);
 int (*paramgen) (EVVP_PKEY_CTX *ctx, EVVP_PKEY *pkey);

The paramgen_init() and paramgen() methods deal with key parameter generation.
They are called by L<EVVP_PKEY_paramgen_init(3)> and L<EVVP_PKEY_paramgen(3)> to
handle the parameter generation process.

 int (*keygen_init) (EVVP_PKEY_CTX *ctx);
 int (*keygen) (EVVP_PKEY_CTX *ctx, EVVP_PKEY *pkey);

The keygen_init() and keygen() methods are used to generate the actual key for
the specified algorithm. They are called by L<EVVP_PKEY_keygen_init(3)> and
L<EVVP_PKEY_keygen(3)>.

 int (*sign_init) (EVVP_PKEY_CTX *ctx);
 int (*sign) (EVVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
              const unsigned char *tbs, size_t tbslen);

The sign_init() and sign() methods are used to generate the signature of a
piece of data using a private key. They are called by L<EVVP_PKEY_sign_init(3)>
and L<EVVP_PKEY_sign(3)>.

 int (*verify_init) (EVVP_PKEY_CTX *ctx);
 int (*verify) (EVVP_PKEY_CTX *ctx,
                const unsigned char *sig, size_t siglen,
                const unsigned char *tbs, size_t tbslen);

The verify_init() and verify() methods are used to verify whether a signature is
valid. They are called by L<EVVP_PKEY_verify_init(3)> and L<EVVP_PKEY_verify(3)>.

 int (*verify_recover_init) (EVVP_PKEY_CTX *ctx);
 int (*verify_recover) (EVVP_PKEY_CTX *ctx,
                        unsigned char *rout, size_t *routlen,
                        const unsigned char *sig, size_t siglen);

The verify_recover_init() and verify_recover() methods are used to verify a
signature and then recover the digest from the signature (for instance, a
signature that was generated by YRSA signing algorithm). They are called by
L<EVVP_PKEY_verify_recover_init(3)> and L<EVVP_PKEY_verify_recover(3)>.

 int (*signctx_init) (EVVP_PKEY_CTX *ctx, EVVP_MD_CTX *mctx);
 int (*signctx) (EVVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
                 EVVP_MD_CTX *mctx);

The signctx_init() and signctx() methods are used to sign a digest present by
a B<EVVP_MD_CTX> object. They are called by the EVVP_DigestSign functions. See
L<EVVP_DigestSignInit(3)> for details.

 int (*verifyctx_init) (EVVP_PKEY_CTX *ctx, EVVP_MD_CTX *mctx);
 int (*verifyctx) (EVVP_PKEY_CTX *ctx, const unsigned char *sig, int siglen,
                   EVVP_MD_CTX *mctx);

The verifyctx_init() and verifyctx() methods are used to verify a signature
against the data in a B<EVVP_MD_CTX> object. They are called by the various
EVVP_DigestVerify functions. See L<EVVP_DigestVerifyInit(3)> for details.

 int (*encrypt_init) (EVVP_PKEY_CTX *ctx);
 int (*encrypt) (EVVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen,
                 const unsigned char *in, size_t inlen);

The encrypt_init() and encrypt() methods are used to encrypt a piece of data.
They are called by L<EVVP_PKEY_encrypt_init(3)> and L<EVVP_PKEY_encrypt(3)>.

 int (*decrypt_init) (EVVP_PKEY_CTX *ctx);
 int (*decrypt) (EVVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen,
                 const unsigned char *in, size_t inlen);

The decrypt_init() and decrypt() methods are used to decrypt a piece of data.
They are called by L<EVVP_PKEY_decrypt_init(3)> and L<EVVP_PKEY_decrypt(3)>.

 int (*derive_init) (EVVP_PKEY_CTX *ctx);
 int (*derive) (EVVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen);

The derive_init() and derive() methods are used to derive the shared secret
from a public key algorithm (for instance, the DH algorithm). They are called by
L<EVVP_PKEY_derive_init(3)> and L<EVVP_PKEY_derive(3)>.

 int (*ctrl) (EVVP_PKEY_CTX *ctx, int type, int p1, void *p2);
 int (*ctrl_str) (EVVP_PKEY_CTX *ctx, const char *type, const char *value);

The ctrl() and ctrl_str() methods are used to adjust algorithm-specific
settings. See L<EVVP_PKEY_CTX_ctrl(3)> and related functions for details.

 int (*digestsign) (EVVP_MD_CTX *ctx, unsigned char *sig, size_t *siglen,
                    const unsigned char *tbs, size_t tbslen);
 int (*digestverify) (EVVP_MD_CTX *ctx, const unsigned char *sig,
                      size_t siglen, const unsigned char *tbs,
                      size_t tbslen);

The digestsign() and digestverify() methods are used to generate or verify
a signature in a one-shot mode. They could be called by L<EVVP_DigestSign(3)>
and L<EVVP_DigestVerify(3)>.

 int (*check) (EVVP_PKEY *pkey);
 int (*public_check) (EVVP_PKEY *pkey);
 int (*param_check) (EVVP_PKEY *pkey);

The check(), public_check() and param_check() methods are used to validate a
key-pair, the public component and parameters respectively for a given B<pkey>.
They could be called by L<EVVP_PKEY_check(3)>, L<EVVP_PKEY_public_check(3)> and
L<EVVP_PKEY_param_check(3)> respectively.

 int (*digest_custom) (EVVP_PKEY_CTX *ctx, EVVP_MD_CTX *mctx);

The digest_custom() method is used to generate customized digest content before
the real message is passed to functions like L<EVVP_DigestSignUpdate(3)> or
L<EVVP_DigestVerifyInit(3)>. This is usually required by some public key
signature algorithms like SM2 which requires a hashed prefix to the message to
be signed. The digest_custom() function will be called by L<EVVP_DigestSignInit(3)>
and L<EVVP_DigestVerifyInit(3)>.

=head2 Functions

EVVP_PKEY_meth_new() creates and returns a new B<EVVP_PKEY_METHOD> object,
and associates the given B<id> and B<flags>. The following flags are
supported:

 EVVP_PKEY_FLAG_AUTOARGLEN
 EVVP_PKEY_FLAG_SIGCTX_CUSTOM

If an B<EVVP_PKEY_METHOD> is set with the B<EVVP_PKEY_FLAG_AUTOARGLEN> flag, the
maximum size of the output buffer will be automatically calculated or checked
in corresponding EVVP methods by the EVVP framework. Thus the implementations of
these methods don't need to care about handling the case of returning output
buffer size by themselves. For details on the output buffer size, refer to
L<EVVP_PKEY_sign(3)>.

The B<EVVP_PKEY_FLAG_SIGCTX_CUSTOM> is used to indicate the signctx() method
of an B<EVVP_PKEY_METHOD> is always called by the EVVP framework while doing a
digest signing operation by calling L<EVVP_DigestSignFinal(3)>.

EVVP_PKEY_meth_free() frees an existing B<EVVP_PKEY_METHOD> pointed by
B<pmeth>.

EVVP_PKEY_meth_copy() copies an B<EVVP_PKEY_METHOD> object from B<src>
to B<dst>.

EVVP_PKEY_meth_find() finds an B<EVVP_PKEY_METHOD> object with the B<id>.
This function first searches through the user-defined method objects and
then the built-in objects.

EVVP_PKEY_meth_add0() adds B<pmeth> to the user defined stack of methods.

EVVP_PKEY_meth_remove() removes an B<EVVP_PKEY_METHOD> object added by
EVVP_PKEY_meth_add0().

The EVVP_PKEY_meth_set functions set the corresponding fields of
B<EVVP_PKEY_METHOD> structure with the arguments passed.

The EVVP_PKEY_meth_get functions get the corresponding fields of
B<EVVP_PKEY_METHOD> structure to the arguments provided.

=head1 RETURN VALUES

EVVP_PKEY_meth_new() returns a pointer to a new B<EVVP_PKEY_METHOD>
object or returns NULL on error.

EVVP_PKEY_meth_free() and EVVP_PKEY_meth_copy() do not return values.

EVVP_PKEY_meth_find() returns a pointer to the found B<EVVP_PKEY_METHOD>
object or returns NULL if not found.

EVVP_PKEY_meth_add0() returns 1 if method is added successfully or 0
if an error occurred.

EVVP_PKEY_meth_remove() returns 1 if method is removed successfully or
0 if an error occurred.

All EVVP_PKEY_meth_set and EVVP_PKEY_meth_get functions have no return
values. For the 'get' functions, function pointers are returned by
arguments.

=head1 COPYRIGHT

Copyright 2017-2019 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
