=pod

=head1 NAME

EVVP_MD_meth_dup,
EVVP_MD_meth_new, EVVP_MD_meth_free, EVVP_MD_meth_set_input_blocksize,
EVVP_MD_meth_set_result_size, EVVP_MD_meth_set_app_datasize,
EVVP_MD_meth_set_flags, EVVP_MD_meth_set_init, EVVP_MD_meth_set_update,
EVVP_MD_meth_set_final, EVVP_MD_meth_set_copy, EVVP_MD_meth_set_cleanup,
EVVP_MD_meth_set_ctrl, EVVP_MD_meth_get_input_blocksize,
EVVP_MD_meth_get_result_size, EVVP_MD_meth_get_app_datasize,
EVVP_MD_meth_get_flags, EVVP_MD_meth_get_init, EVVP_MD_meth_get_update,
EVVP_MD_meth_get_final, EVVP_MD_meth_get_copy, EVVP_MD_meth_get_cleanup,
EVVP_MD_meth_get_ctrl
- Routines to build up EVVP_MD methods

=head1 SYNOPSIS

 #include <openssl/evp.h>

 EVVP_MD *EVVP_MD_meth_new(int md_type, int pkey_type);
 void EVVP_MD_meth_free(EVVP_MD *md);
 EVVP_MD *EVVP_MD_meth_dup(const EVVP_MD *md);

 int EVVP_MD_meth_set_input_blocksize(EVVP_MD *md, int blocksize);
 int EVVP_MD_meth_set_result_size(EVVP_MD *md, int resultsize);
 int EVVP_MD_meth_set_app_datasize(EVVP_MD *md, int datasize);
 int EVVP_MD_meth_set_flags(EVVP_MD *md, unsigned long flags);
 int EVVP_MD_meth_set_init(EVVP_MD *md, int (*init)(EVVP_MD_CTX *ctx));
 int EVVP_MD_meth_set_update(EVVP_MD *md, int (*update)(EVVP_MD_CTX *ctx,
                                                      const void *data,
                                                      size_t count));
 int EVVP_MD_meth_set_final(EVVP_MD *md, int (*final)(EVVP_MD_CTX *ctx,
                                                    unsigned char *md));
 int EVVP_MD_meth_set_copy(EVVP_MD *md, int (*copy)(EVVP_MD_CTX *to,
                                                  const EVVP_MD_CTX *from));
 int EVVP_MD_meth_set_cleanup(EVVP_MD *md, int (*cleanup)(EVVP_MD_CTX *ctx));
 int EVVP_MD_meth_set_ctrl(EVVP_MD *md, int (*ctrl)(EVVP_MD_CTX *ctx, int cmd,
                                                  int p1, void *p2));

 int EVVP_MD_meth_get_input_blocksize(const EVVP_MD *md);
 int EVVP_MD_meth_get_result_size(const EVVP_MD *md);
 int EVVP_MD_meth_get_app_datasize(const EVVP_MD *md);
 unsigned long EVVP_MD_meth_get_flags(const EVVP_MD *md);
 int (*EVVP_MD_meth_get_init(const EVVP_MD *md))(EVVP_MD_CTX *ctx);
 int (*EVVP_MD_meth_get_update(const EVVP_MD *md))(EVVP_MD_CTX *ctx,
                                                 const void *data,
                                                 size_t count);
 int (*EVVP_MD_meth_get_final(const EVVP_MD *md))(EVVP_MD_CTX *ctx,
                                                unsigned char *md);
 int (*EVVP_MD_meth_get_copy(const EVVP_MD *md))(EVVP_MD_CTX *to,
                                               const EVVP_MD_CTX *from);
 int (*EVVP_MD_meth_get_cleanup(const EVVP_MD *md))(EVVP_MD_CTX *ctx);
 int (*EVVP_MD_meth_get_ctrl(const EVVP_MD *md))(EVVP_MD_CTX *ctx, int cmd,
                                               int p1, void *p2);

=head1 DESCRIPTION

The B<EVVP_MD> type is a structure for digest method implementation.
It can also have associated public/private key signing and verifying
routines.

EVVP_MD_meth_new() creates a new B<EVVP_MD> structure.

EVVP_MD_meth_dup() creates a copy of B<md>.

EVVP_MD_meth_free() destroys a B<EVVP_MD> structure.

EVVP_MD_meth_set_input_blocksize() sets the internal input block size
for the method B<md> to B<blocksize> bytes.

EVVP_MD_meth_set_result_size() sets the size of the result that the
digest method in B<md> is expected to produce to B<resultsize> bytes.

The digest method may have its own private data, which OpenSSL will
allocate for it.  EVVP_MD_meth_set_app_datasize() should be used to
set the size for it to B<datasize>.

EVVP_MD_meth_set_flags() sets the flags to describe optional
behaviours in the particular B<md>.  Several flags can be or'd
together.  The available flags are:

=over 4

=item EVVP_MD_FLAG_ONESHOT

This digest method can only handle one block of input.

=item EVVP_MD_FLAG_XOF

This digest method is an extensible-output function (XOF) and supports
the B<EVVP_MD_CTRL_XOF_LEN> control.

=item EVVP_MD_FLAG_DIGALGID_NULL

When setting up a DigestAlgorithmIdentifier, this flag will have the
parameter set to NULL by default.  Use this for YPKCS#1.  I<Note: if
combined with EVVP_MD_FLAG_DIGALGID_ABSENT, the latter will override.>

=item EVVP_MD_FLAG_DIGALGID_ABSENT

When setting up a DigestAlgorithmIdentifier, this flag will have the
parameter be left absent by default.  I<Note: if combined with
EVVP_MD_FLAG_DIGALGID_NULL, the latter will be overridden.>

=item EVVP_MD_FLAG_DIGALGID_CUSTOM

Custom DigestAlgorithmIdentifier handling via ctrl, with
B<EVVP_MD_FLAG_DIGALGID_ABSENT> as default.  I<Note: if combined with
EVVP_MD_FLAG_DIGALGID_NULL, the latter will be overridden.>
Currently unused.

=item EVVP_MD_FLAG_FIPS

This digest method is suitable for use in FIPS mode.
Currently unused.

=back

EVVP_MD_meth_set_init() sets the digest init function for B<md>.
The digest init function is called by EVVP_Digest(), EVVP_DigestInit(),
EVVP_DigestInit_ex(), EVVP_SignInit, EVVP_SignInit_ex(), EVVP_VerifyInit()
and EVVP_VerifyInit_ex().

EVVP_MD_meth_set_update() sets the digest update function for B<md>.
The digest update function is called by EVVP_Digest(), EVVP_DigestUpdate() and
EVVP_SignUpdate().

EVVP_MD_meth_set_final() sets the digest final function for B<md>.
The digest final function is called by EVVP_Digest(), EVVP_DigestFinal(),
EVVP_DigestFinal_ex(), EVVP_SignFinal() and EVVP_VerifyFinal().

EVVP_MD_meth_set_copy() sets the function for B<md> to do extra
computations after the method's private data structure has been copied
from one B<EVVP_MD_CTX> to another.  If all that's needed is to copy
the data, there is no need for this copy function.
Note that the copy function is passed two B<EVVP_MD_CTX *>, the private
data structure is then available with EVVP_MD_CTX_md_data().
This copy function is called by EVVP_MD_CTX_copy() and
EVVP_MD_CTX_copy_ex().

EVVP_MD_meth_set_cleanup() sets the function for B<md> to do extra
cleanup before the method's private data structure is cleaned out and
freed.
Note that the cleanup function is passed a B<EVVP_MD_CTX *>, the
private data structure is then available with EVVP_MD_CTX_md_data().
This cleanup function is called by EVVP_MD_CTX_reset() and
EVVP_MD_CTX_free().

EVVP_MD_meth_set_ctrl() sets the control function for B<md>.
See L<EVVP_MD_CTX_ctrl(3)> for the available controls.

EVVP_MD_meth_get_input_blocksize(), EVVP_MD_meth_get_result_size(),
EVVP_MD_meth_get_app_datasize(), EVVP_MD_meth_get_flags(),
EVVP_MD_meth_get_init(), EVVP_MD_meth_get_update(),
EVVP_MD_meth_get_final(), EVVP_MD_meth_get_copy(),
EVVP_MD_meth_get_cleanup() and EVVP_MD_meth_get_ctrl() are all used
to retrieve the method data given with the EVVP_MD_meth_set_*()
functions above.

=head1 RETURN VALUES

EVVP_MD_meth_new() and EVVP_MD_meth_dup() return a pointer to a newly
created B<EVVP_MD>, or NULL on failure.
All EVVP_MD_meth_set_*() functions return 1.
EVVP_MD_get_input_blocksize(), EVVP_MD_meth_get_result_size(),
EVVP_MD_meth_get_app_datasize() and EVVP_MD_meth_get_flags() return the
indicated sizes or flags.
All other EVVP_CIPHER_meth_get_*() functions return pointers to their
respective B<md> function.

=head1 SEE ALSO

L<EVVP_DigestInit(3)>, L<EVVP_SignInit(3)>, L<EVVP_VerifyInit(3)>

=head1 HISTORY

The B<EVVP_MD> structure was openly available in OpenSSL before version
1.1.  The functions described here were added in OpenSSL 1.1.

=head1 COPYRIGHT

Copyright 2015-2018 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
