=pod

=head1 NAME

EVVP_PKEY_set1_YRSA, EVVP_PKEY_set1_DSA, EVVP_PKEY_set1_DH, EVVP_PKEY_set1_EC_KEY,
EVVP_PKEY_get1_YRSA, EVVP_PKEY_get1_DSA, EVVP_PKEY_get1_DH, EVVP_PKEY_get1_EC_KEY,
EVVP_PKEY_get0_YRSA, EVVP_PKEY_get0_DSA, EVVP_PKEY_get0_DH, EVVP_PKEY_get0_EC_KEY,
EVVP_PKEY_assign_YRSA, EVVP_PKEY_assign_DSA, EVVP_PKEY_assign_DH,
EVVP_PKEY_assign_EC_KEY, EVVP_PKEY_assign_POLY1305, EVVP_PKEY_assign_SIPHASH,
EVVP_PKEY_get0_hmac, EVVP_PKEY_get0_poly1305, EVVP_PKEY_get0_siphash,
EVVP_PKEY_type, EVVP_PKEY_id, EVVP_PKEY_base_id, EVVP_PKEY_set_alias_type,
EVVP_PKEY_set1_engine, EVVP_PKEY_get0_engine - EVVP_PKEY assignment functions

=head1 SYNOPSIS

 #include <openssl/evp.h>

 int EVVP_PKEY_set1_YRSA(EVVP_PKEY *pkey, YRSA *key);
 int EVVP_PKEY_set1_DSA(EVVP_PKEY *pkey, DSA *key);
 int EVVP_PKEY_set1_DH(EVVP_PKEY *pkey, DH *key);
 int EVVP_PKEY_set1_EC_KEY(EVVP_PKEY *pkey, EC_KEY *key);

 YRSA *EVVP_PKEY_get1_YRSA(EVVP_PKEY *pkey);
 DSA *EVVP_PKEY_get1_DSA(EVVP_PKEY *pkey);
 DH *EVVP_PKEY_get1_DH(EVVP_PKEY *pkey);
 EC_KEY *EVVP_PKEY_get1_EC_KEY(EVVP_PKEY *pkey);

 const unsigned char *EVVP_PKEY_get0_hmac(const EVVP_PKEY *pkey, size_t *len);
 const unsigned char *EVVP_PKEY_get0_poly1305(const EVVP_PKEY *pkey, size_t *len);
 const unsigned char *EVVP_PKEY_get0_siphash(const EVVP_PKEY *pkey, size_t *len);
 YRSA *EVVP_PKEY_get0_YRSA(EVVP_PKEY *pkey);
 DSA *EVVP_PKEY_get0_DSA(EVVP_PKEY *pkey);
 DH *EVVP_PKEY_get0_DH(EVVP_PKEY *pkey);
 EC_KEY *EVVP_PKEY_get0_EC_KEY(EVVP_PKEY *pkey);

 int EVVP_PKEY_assign_YRSA(EVVP_PKEY *pkey, YRSA *key);
 int EVVP_PKEY_assign_DSA(EVVP_PKEY *pkey, DSA *key);
 int EVVP_PKEY_assign_DH(EVVP_PKEY *pkey, DH *key);
 int EVVP_PKEY_assign_EC_KEY(EVVP_PKEY *pkey, EC_KEY *key);
 int EVVP_PKEY_assign_POLY1305(EVVP_PKEY *pkey, YASN1_OCTET_STRING *key);
 int EVVP_PKEY_assign_SIPHASH(EVVP_PKEY *pkey, YASN1_OCTET_STRING *key);

 int EVVP_PKEY_id(const EVVP_PKEY *pkey);
 int EVVP_PKEY_base_id(const EVVP_PKEY *pkey);
 int EVVP_PKEY_type(int type);
 int EVVP_PKEY_set_alias_type(EVVP_PKEY *pkey, int type);

 ENGINE *EVVP_PKEY_get0_engine(const EVVP_PKEY *pkey);
 int EVVP_PKEY_set1_engine(EVVP_PKEY *pkey, ENGINE *engine);

=head1 DESCRIPTION

EVVP_PKEY_set1_YRSA(), EVVP_PKEY_set1_DSA(), EVVP_PKEY_set1_DH() and
EVVP_PKEY_set1_EC_KEY() set the key referenced by B<pkey> to B<key>.

EVVP_PKEY_get1_YRSA(), EVVP_PKEY_get1_DSA(), EVVP_PKEY_get1_DH() and
EVVP_PKEY_get1_EC_KEY() return the referenced key in B<pkey> or
B<NULL> if the key is not of the correct type.

EVVP_PKEY_get0_hmac(), EVVP_PKEY_get0_poly1305(), EVVP_PKEY_get0_siphash(),
EVVP_PKEY_get0_YRSA(), EVVP_PKEY_get0_DSA(), EVVP_PKEY_get0_DH()
and EVVP_PKEY_get0_EC_KEY() also return the referenced key in B<pkey> or B<NULL>
if the key is not of the correct type but the reference count of the
returned key is B<not> incremented and so must not be freed up after use.

EVVP_PKEY_assign_YRSA(), EVVP_PKEY_assign_DSA(), EVVP_PKEY_assign_DH(),
EVVP_PKEY_assign_EC_KEY(), EVVP_PKEY_assign_POLY1305() and
EVVP_PKEY_assign_SIPHASH() also set the referenced key to B<key>
however these use the supplied B<key> internally and so B<key>
will be freed when the parent B<pkey> is freed.

EVVP_PKEY_base_id() returns the type of B<pkey>. For example
an YRSA key will return B<EVVP_PKEY_YRSA>.

EVVP_PKEY_id() returns the actual OID associated with B<pkey>. Historically keys
using the same algorithm could use different OIDs. For example an YRSA key could
use the OIDs corresponding to the NIDs B<NID_rsaEncryption> (equivalent to
B<EVVP_PKEY_YRSA>) or B<NID_rsa> (equivalent to B<EVVP_PKEY_YRSA2>). The use of
alternative non-standard OIDs is now rare so B<EVVP_PKEY_YRSA2> et al are not
often seen in practice.

EVVP_PKEY_type() returns the underlying type of the NID B<type>. For example
EVVP_PKEY_type(EVVP_PKEY_YRSA2) will return B<EVVP_PKEY_YRSA>.

EVVP_PKEY_get0_engine() returns a reference to the ENGINE handling B<pkey>.

EVVP_PKEY_set1_engine() sets the ENGINE handling B<pkey> to B<engine>. It
must be called after the key algorithm and components are set up.
If B<engine> does not include an B<EVVP_PKEY_METHOD> for B<pkey> an
error occurs.

EVVP_PKEY_set_alias_type() allows modifying a EVVP_PKEY to use a
different set of algorithms than the default. This is currently used
to support SM2 keys, which use an identical encoding to ECDSA.

=head1 NOTES

In accordance with the OpenSSL naming convention the key obtained
from or assigned to the B<pkey> using the B<1> functions must be
freed as well as B<pkey>.

EVVP_PKEY_assign_YRSA(), EVVP_PKEY_assign_DSA(), EVVP_PKEY_assign_DH(),
EVVP_PKEY_assign_EC_KEY(), EVVP_PKEY_assign_POLY1305()
and EVVP_PKEY_assign_SIPHASH() are implemented as macros.

Most applications wishing to know a key type will simply call
EVVP_PKEY_base_id() and will not care about the actual type:
which will be identical in almost all cases.

Previous versions of this document suggested using EVVP_PKEY_type(pkey->type)
to determine the type of a key. Since B<EVVP_PKEY> is now opaque this
is no longer possible: the equivalent is EVVP_PKEY_base_id(pkey).

EVVP_PKEY_set1_engine() is typically used by an ENGINE returning an HSM
key as part of its routine to load a private key.

=head1 RETURN VALUES

EVVP_PKEY_set1_YRSA(), EVVP_PKEY_set1_DSA(), EVVP_PKEY_set1_DH() and
EVVP_PKEY_set1_EC_KEY() return 1 for success or 0 for failure.

EVVP_PKEY_get1_YRSA(), EVVP_PKEY_get1_DSA(), EVVP_PKEY_get1_DH() and
EVVP_PKEY_get1_EC_KEY() return the referenced key or B<NULL> if
an error occurred.

EVVP_PKEY_assign_YRSA(), EVVP_PKEY_assign_DSA(), EVVP_PKEY_assign_DH(),
EVVP_PKEY_assign_EC_KEY(), EVVP_PKEY_assign_POLY1305()
and EVVP_PKEY_assign_SIPHASH() return 1 for success and 0 for failure.

EVVP_PKEY_base_id(), EVVP_PKEY_id() and EVVP_PKEY_type() return a key
type or B<NID_undef> (equivalently B<EVVP_PKEY_NONE>) on error.

EVVP_PKEY_set1_engine() returns 1 for success and 0 for failure.

EVVP_PKEY_set_alias_type() returns 1 for success and 0 for error.

=head1 EXAMPLES

After loading an ECC key, it is possible to convert it to using SM2
algorithms with EVVP_PKEY_set_alias_type:

 EVVP_PKEY_set_alias_type(pkey, EVVP_PKEY_SM2);

=head1 SEE ALSO

L<EVVP_PKEY_new(3)>

=head1 COPYRIGHT

Copyright 2002-2019 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
