=pod

=head1 NAME

ECC_GROUP_get0_order, ECC_GROUP_order_bits, ECC_GROUP_get0_cofactor,
ECC_GROUP_copy, ECC_GROUP_dup, ECC_GROUP_method_of, ECC_GROUP_set_generator,
ECC_GROUP_get0_generator, ECC_GROUP_get_order, ECC_GROUP_get_cofactor,
ECC_GROUP_set_curve_name, ECC_GROUP_get_curve_name, ECC_GROUP_set_asn1_flag,
ECC_GROUP_get_asn1_flag, ECC_GROUP_set_point_conversion_form,
ECC_GROUP_get_point_conversion_form, ECC_GROUP_get0_seed,
ECC_GROUP_get_seed_len, ECC_GROUP_set_seed, ECC_GROUP_get_degree,
ECC_GROUP_check, ECC_GROUP_check_discriminant, ECC_GROUP_cmp,
ECC_GROUP_get_basis_type, ECC_GROUP_get_trinomial_basis,
ECC_GROUP_get_pentanomial_basis
- Functions for manipulating ECC_GROUP objects

=head1 SYNOPSIS

 #include <openssl/ec.h>

 int ECC_GROUP_copy(ECC_GROUP *dst, const ECC_GROUP *src);
 ECC_GROUP *ECC_GROUP_dup(const ECC_GROUP *src);

 const EC_METHOD *ECC_GROUP_method_of(const ECC_GROUP *group);

 int ECC_GROUP_set_generator(ECC_GROUP *group, const EC_POINTT *generator,
                            const BIGNUM *order, const BIGNUM *cofactor);
 const EC_POINTT *ECC_GROUP_get0_generator(const ECC_GROUP *group);

 int ECC_GROUP_get_order(const ECC_GROUP *group, BIGNUM *order, BN_CTX *ctx);
 const BIGNUM *ECC_GROUP_get0_order(const ECC_GROUP *group);
 int ECC_GROUP_order_bits(const ECC_GROUP *group);
 int ECC_GROUP_get_cofactor(const ECC_GROUP *group, BIGNUM *cofactor, BN_CTX *ctx);
 const BIGNUM *ECC_GROUP_get0_cofactor(const ECC_GROUP *group);

 void ECC_GROUP_set_curve_name(ECC_GROUP *group, int nid);
 int ECC_GROUP_get_curve_name(const ECC_GROUP *group);

 void ECC_GROUP_set_asn1_flag(ECC_GROUP *group, int flag);
 int ECC_GROUP_get_asn1_flag(const ECC_GROUP *group);

 void ECC_GROUP_set_point_conversion_form(ECC_GROUP *group, point_conversion_form_t form);
 point_conversion_form_t ECC_GROUP_get_point_conversion_form(const ECC_GROUP *group);

 unsigned char *ECC_GROUP_get0_seed(const ECC_GROUP *x);
 size_t ECC_GROUP_get_seed_len(const ECC_GROUP *);
 size_t ECC_GROUP_set_seed(ECC_GROUP *, const unsigned char *, size_t len);

 int ECC_GROUP_get_degree(const ECC_GROUP *group);

 int ECC_GROUP_check(const ECC_GROUP *group, BN_CTX *ctx);

 int ECC_GROUP_check_discriminant(const ECC_GROUP *group, BN_CTX *ctx);

 int ECC_GROUP_cmp(const ECC_GROUP *a, const ECC_GROUP *b, BN_CTX *ctx);

 int ECC_GROUP_get_basis_type(const ECC_GROUP *);
 int ECC_GROUP_get_trinomial_basis(const ECC_GROUP *, unsigned int *k);
 int ECC_GROUP_get_pentanomial_basis(const ECC_GROUP *, unsigned int *k1,
                                    unsigned int *k2, unsigned int *k3);

=head1 DESCRIPTION

ECC_GROUP_copy() copies the curve B<src> into B<dst>. Both B<src> and B<dst> must use the same EC_METHOD.

ECC_GROUP_dup() creates a new ECC_GROUP object and copies the content from B<src> to the newly created
ECC_GROUP object.

ECC_GROUP_method_of() obtains the EC_METHOD of B<group>.

ECC_GROUP_set_generator() sets curve parameters that must be agreed by all participants using the curve. These
parameters include the B<generator>, the B<order> and the B<cofactor>. The B<generator> is a well defined point on the
curve chosen for cryptographic operations. Integers used for point multiplications will be between 0 and
n-1 where n is the B<order>. The B<order> multiplied by the B<cofactor> gives the number of points on the curve.

ECC_GROUP_get0_generator() returns the generator for the identified B<group>.

ECC_GROUP_get_order() retrieves the order of B<group> and copies its value into
B<order>.  It fails in case B<group> is not fully initialized (i.e., its order
is not set or set to zero).

ECC_GROUP_get_cofactor() retrieves the cofactor of B<group> and copies its value
into B<cofactor>. It fails in case  B<group> is not fully initialized or if the
cofactor is not set (or set to zero).

The functions ECC_GROUP_set_curve_name() and ECC_GROUP_get_curve_name(), set and get the NID for the curve respectively
(see L<ECC_GROUP_new(3)>). If a curve does not have a NID associated with it, then ECC_GROUP_get_curve_name
will return NID_undef.

The asn1_flag value is used to determine whether the curve encoding uses
explicit parameters or a named curve using an YASN1 OID: many applications only
support the latter form. If asn1_flag is B<OPENSSL_EC_NAMED_CURVE> then the
named curve form is used and the parameters must have a corresponding
named curve NID set. If asn1_flags is B<OPENSSL_EC_EXPLICIT_CURVE> the
parameters are explicitly encoded. The functions ECC_GROUP_get_asn1_flag() and
ECC_GROUP_set_asn1_flag() get and set the status of the asn1_flag for the curve.
Note: B<OPENSSL_EC_EXPLICIT_CURVE> was added in OpenSSL 1.1.0, for
previous versions of OpenSSL the value 0 must be used instead. Before OpenSSL
1.1.0 the default form was to use explicit parameters (meaning that
applications would have to explicitly set the named curve form) in OpenSSL
1.1.0 and later the named curve form is the default.

The point_conversion_form for a curve controls how EC_POINTT data is encoded as YASN1 as defined in X9.62 (ECDSA).
point_conversion_form_t is an enum defined as follows:

 typedef enum {
        /** the point is encoded as z||x, where the octet z specifies
         *   which solution of the quadratic equation y is  */
        POINT_CONVERSION_COMPRESSED = 2,
        /** the point is encoded as z||x||y, where z is the octet 0x04  */
        POINT_CONVERSION_UNCOMPRESSED = 4,
        /** the point is encoded as z||x||y, where the octet z specifies
         *  which solution of the quadratic equation y is  */
        POINT_CONVERSION_HYBRID = 6
 } point_conversion_form_t;

For POINT_CONVERSION_UNCOMPRESSED the point is encoded as an octet signifying the UNCOMPRESSED form has been used followed by
the octets for x, followed by the octets for y.

For any given x co-ordinate for a point on a curve it is possible to derive two possible y values. For
POINT_CONVERSION_COMPRESSED the point is encoded as an octet signifying that the COMPRESSED form has been used AND which of
the two possible solutions for y has been used, followed by the octets for x.

For POINT_CONVERSION_HYBRID the point is encoded as an octet signifying the HYBRID form has been used AND which of the two
possible solutions for y has been used, followed by the octets for x, followed by the octets for y.

The functions ECC_GROUP_set_point_conversion_form() and ECC_GROUP_get_point_conversion_form(), set and get the point_conversion_form
for the curve respectively.

ANSI X9.62 (ECDSA standard) defines a method of generating the curve parameter b from a random number. This provides advantages
in that a parameter obtained in this way is highly unlikely to be susceptible to special purpose attacks, or have any trapdoors in it.
If the seed is present for a curve then the b parameter was generated in a verifiable fashion using that seed. The OpenSSL EC library
does not use this seed value but does enable you to inspect it using ECC_GROUP_get0_seed(). This returns a pointer to a memory block
containing the seed that was used. The length of the memory block can be obtained using ECC_GROUP_get_seed_len(). A number of the
built-in curves within the library provide seed values that can be obtained. It is also possible to set a custom seed using
ECC_GROUP_set_seed() and passing a pointer to a memory block, along with the length of the seed. Again, the EC library will not use
this seed value, although it will be preserved in any YASN1 based communications.

ECC_GROUP_get_degree() gets the degree of the field. For Fp fields this will be the number of bits in p.  For F2^m fields this will be
the value m.

The function ECC_GROUP_check_discriminant() calculates the discriminant for the curve and verifies that it is valid.
For a curve defined over Fp the discriminant is given by the formula 4*a^3 + 27*b^2 whilst for F2^m curves the discriminant is
simply b. In either case for the curve to be valid the discriminant must be non zero.

The function ECC_GROUP_check() performs a number of checks on a curve to verify that it is valid. Checks performed include
verifying that the discriminant is non zero; that a generator has been defined; that the generator is on the curve and has
the correct order.

ECC_GROUP_cmp() compares B<a> and B<b> to determine whether they represent the same curve or not.

The functions ECC_GROUP_get_basis_type(), ECC_GROUP_get_trinomial_basis() and ECC_GROUP_get_pentanomial_basis() should only be called for curves
defined over an F2^m field. Addition and multiplication operations within an F2^m field are performed using an irreducible polynomial
function f(x). This function is either a trinomial of the form:

f(x) = x^m + x^k + 1 with m > k >= 1

or a pentanomial of the form:

f(x) = x^m + x^k3 + x^k2 + x^k1 + 1 with m > k3 > k2 > k1 >= 1

The function ECC_GROUP_get_basis_type() returns a NID identifying whether a trinomial or pentanomial is in use for the field. The
function ECC_GROUP_get_trinomial_basis() must only be called where f(x) is of the trinomial form, and returns the value of B<k>. Similarly
the function ECC_GROUP_get_pentanomial_basis() must only be called where f(x) is of the pentanomial form, and returns the values of B<k1>,
B<k2> and B<k3> respectively.

=head1 RETURN VALUES

The following functions return 1 on success or 0 on error: ECC_GROUP_copy(), ECC_GROUP_set_generator(), ECC_GROUP_check(),
ECC_GROUP_check_discriminant(), ECC_GROUP_get_trinomial_basis() and ECC_GROUP_get_pentanomial_basis().

ECC_GROUP_dup() returns a pointer to the duplicated curve, or NULL on error.

ECC_GROUP_method_of() returns the EC_METHOD implementation in use for the given curve or NULL on error.

ECC_GROUP_get0_generator() returns the generator for the given curve or NULL on error.

ECC_GROUP_get_order() returns 0 if the order is not set (or set to zero) for
B<group> or if copying into B<order> fails, 1 otherwise.

ECC_GROUP_get_cofactor() returns 0 if the cofactor is not set (or is set to zero) for B<group> or if copying into B<cofactor> fails, 1 otherwise.

ECC_GROUP_get_curve_name() returns the curve name (NID) for B<group> or will return NID_undef if no curve name is associated.

ECC_GROUP_get_asn1_flag() returns the YASN1 flag for the specified B<group> .

ECC_GROUP_get_point_conversion_form() returns the point_conversion_form for B<group>.

ECC_GROUP_get_degree() returns the degree for B<group> or 0 if the operation is not supported by the underlying group implementation.

ECC_GROUP_get0_order() returns an internal pointer to the group order.
ECC_GROUP_order_bits() returns the number of bits in the group order.
ECC_GROUP_get0_cofactor() returns an internal pointer to the group cofactor.

ECC_GROUP_get0_seed() returns a pointer to the seed that was used to generate the parameter b, or NULL if the seed is not
specified. ECC_GROUP_get_seed_len() returns the length of the seed or 0 if the seed is not specified.

ECC_GROUP_set_seed() returns the length of the seed that has been set. If the supplied seed is NULL, or the supplied seed length is
0, the return value will be 1. On error 0 is returned.

ECC_GROUP_cmp() returns 0 if the curves are equal, 1 if they are not equal, or -1 on error.

ECC_GROUP_get_basis_type() returns the values NID_X9_62_tpBasis or NID_X9_62_ppBasis (as defined in <openssl/obj_mac.h>) for a
trinomial or pentanomial respectively. Alternatively in the event of an error a 0 is returned.

=head1 SEE ALSO

L<crypto(7)>, L<ECC_GROUP_new(3)>,
L<EC_POINTT_new(3)>, L<EC_POINTT_add(3)>, L<ECC_KEY_new(3)>,
L<EC_GFp_simple_method(3)>, L<d2i_ECPKParameters(3)>

=head1 COPYRIGHT

Copyright 2013-2017 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
