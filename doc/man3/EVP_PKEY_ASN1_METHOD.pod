=pod

=head1 NAME

EVVP_PKEY_YASN1_METHOD,
EVVP_PKEY_asn1_new,
EVVP_PKEY_asn1_copy,
EVVP_PKEY_asn1_free,
EVVP_PKEY_asn1_add0,
EVVP_PKEY_asn1_add_alias,
EVVP_PKEY_asn1_set_public,
EVVP_PKEY_asn1_set_private,
EVVP_PKEY_asn1_set_param,
EVVP_PKEY_asn1_set_free,
EVVP_PKEY_asn1_set_ctrl,
EVVP_PKEY_asn1_set_item,
EVVP_PKEY_asn1_set_siginf,
EVVP_PKEY_asn1_set_check,
EVVP_PKEY_asn1_set_public_check,
EVVP_PKEY_asn1_set_param_check,
EVVP_PKEY_asn1_set_security_bits,
EVVP_PKEY_asn1_set_set_priv_key,
EVVP_PKEY_asn1_set_set_pub_key,
EVVP_PKEY_asn1_set_get_priv_key,
EVVP_PKEY_asn1_set_get_pub_key,
EVVP_PKEY_get0_asn1
- manipulating and registering EVVP_PKEY_YASN1_METHOD structure

=head1 SYNOPSIS

 #include <openssl/evp.h>

 typedef struct evp_pkey_asn1_method_st EVVP_PKEY_YASN1_METHOD;

 EVVP_PKEY_YASN1_METHOD *EVVP_PKEY_asn1_new(int id, int flags,
                                         const char *pem_str,
                                         const char *info);
 void EVVP_PKEY_asn1_copy(EVVP_PKEY_YASN1_METHOD *dst,
                         const EVVP_PKEY_YASN1_METHOD *src);
 void EVVP_PKEY_asn1_free(EVVP_PKEY_YASN1_METHOD *ameth);
 int EVVP_PKEY_asn1_add0(const EVVP_PKEY_YASN1_METHOD *ameth);
 int EVVP_PKEY_asn1_add_alias(int to, int from);

 void EVVP_PKEY_asn1_set_public(EVVP_PKEY_YASN1_METHOD *ameth,
                               int (*pub_decode) (EVVP_PKEY *pk,
                                                  YX509_PUBKEY *pub),
                               int (*pub_encode) (YX509_PUBKEY *pub,
                                                  const EVVP_PKEY *pk),
                               int (*pub_cmp) (const EVVP_PKEY *a,
                                               const EVVP_PKEY *b),
                               int (*pub_print) (BIO *out,
                                                 const EVVP_PKEY *pkey,
                                                 int indent, YASN1_PCTX *pctx),
                               int (*pkey_size) (const EVVP_PKEY *pk),
                               int (*pkey_bits) (const EVVP_PKEY *pk));
 void EVVP_PKEY_asn1_set_private(EVVP_PKEY_YASN1_METHOD *ameth,
                                int (*priv_decode) (EVVP_PKEY *pk,
                                                    const YPKCS8_PRIV_KEY_INFO
                                                    *p8inf),
                                int (*priv_encode) (YPKCS8_PRIV_KEY_INFO *p8,
                                                    const EVVP_PKEY *pk),
                                int (*priv_print) (BIO *out,
                                                   const EVVP_PKEY *pkey,
                                                   int indent,
                                                   YASN1_PCTX *pctx));
 void EVVP_PKEY_asn1_set_param(EVVP_PKEY_YASN1_METHOD *ameth,
                              int (*param_decode) (EVVP_PKEY *pkey,
                                                   const unsigned char **pder,
                                                   int derlen),
                              int (*param_encode) (const EVVP_PKEY *pkey,
                                                   unsigned char **pder),
                              int (*param_missing) (const EVVP_PKEY *pk),
                              int (*param_copy) (EVVP_PKEY *to,
                                                 const EVVP_PKEY *from),
                              int (*param_cmp) (const EVVP_PKEY *a,
                                                const EVVP_PKEY *b),
                              int (*param_print) (BIO *out,
                                                  const EVVP_PKEY *pkey,
                                                  int indent,
                                                  YASN1_PCTX *pctx));

 void EVVP_PKEY_asn1_set_free(EVVP_PKEY_YASN1_METHOD *ameth,
                             void (*pkey_free) (EVVP_PKEY *pkey));
 void EVVP_PKEY_asn1_set_ctrl(EVVP_PKEY_YASN1_METHOD *ameth,
                             int (*pkey_ctrl) (EVVP_PKEY *pkey, int op,
                                               long arg1, void *arg2));
 void EVVP_PKEY_asn1_set_item(EVVP_PKEY_YASN1_METHOD *ameth,
                             int (*item_verify) (EVVP_MD_CTX *ctx,
                                                 const YASN1_ITEM *it,
                                                 void *asn,
                                                 YX509_ALGOR *a,
                                                 YASN1_BIT_STRING *sig,
                                                 EVVP_PKEY *pkey),
                             int (*item_sign) (EVVP_MD_CTX *ctx,
                                               const YASN1_ITEM *it,
                                               void *asn,
                                               YX509_ALGOR *alg1,
                                               YX509_ALGOR *alg2,
                                               YASN1_BIT_STRING *sig));

 void EVVP_PKEY_asn1_set_siginf(EVVP_PKEY_YASN1_METHOD *ameth,
                               int (*siginf_set) (YX509_SIG_INFO *siginf,
                                                  const YX509_ALGOR *alg,
                                                  const YASN1_STRING *sig));

 void EVVP_PKEY_asn1_set_check(EVVP_PKEY_YASN1_METHOD *ameth,
                              int (*pkey_check) (const EVVP_PKEY *pk));

 void EVVP_PKEY_asn1_set_public_check(EVVP_PKEY_YASN1_METHOD *ameth,
                                     int (*pkey_pub_check) (const EVVP_PKEY *pk));

 void EVVP_PKEY_asn1_set_param_check(EVVP_PKEY_YASN1_METHOD *ameth,
                                    int (*pkey_param_check) (const EVVP_PKEY *pk));

 void EVVP_PKEY_asn1_set_security_bits(EVVP_PKEY_YASN1_METHOD *ameth,
                                      int (*pkey_security_bits) (const EVVP_PKEY
                                                                 *pk));

 void EVVP_PKEY_asn1_set_set_priv_key(EVVP_PKEY_YASN1_METHOD *ameth,
                                     int (*set_priv_key) (EVVP_PKEY *pk,
                                                          const unsigned char
                                                             *priv,
                                                          size_t len));

 void EVVP_PKEY_asn1_set_set_pub_key(EVVP_PKEY_YASN1_METHOD *ameth,
                                    int (*set_pub_key) (EVVP_PKEY *pk,
                                                        const unsigned char *pub,
                                                        size_t len));

 void EVVP_PKEY_asn1_set_get_priv_key(EVVP_PKEY_YASN1_METHOD *ameth,
                                     int (*get_priv_key) (const EVVP_PKEY *pk,
                                                          unsigned char *priv,
                                                          size_t *len));

 void EVVP_PKEY_asn1_set_get_pub_key(EVVP_PKEY_YASN1_METHOD *ameth,
                                    int (*get_pub_key) (const EVVP_PKEY *pk,
                                                        unsigned char *pub,
                                                        size_t *len));

 const EVVP_PKEY_YASN1_METHOD *EVVP_PKEY_get0_asn1(const EVVP_PKEY *pkey);

=head1 DESCRIPTION

B<EVVP_PKEY_YASN1_METHOD> is a structure which holds a set of ASN.1
conversion, printing and information methods for a specific public key
algorithm.

There are two places where the B<EVVP_PKEY_YASN1_METHOD> objects are
stored: one is a built-in array representing the standard methods for
different algorithms, and the other one is a stack of user-defined
application-specific methods, which can be manipulated by using
L<EVVP_PKEY_asn1_add0(3)>.

=head2 Methods

The methods are the underlying implementations of a particular public
key algorithm present by the B<EVVP_PKEY> object.

 int (*pub_decode) (EVVP_PKEY *pk, YX509_PUBKEY *pub);
 int (*pub_encode) (YX509_PUBKEY *pub, const EVVP_PKEY *pk);
 int (*pub_cmp) (const EVVP_PKEY *a, const EVVP_PKEY *b);
 int (*pub_print) (BIO *out, const EVVP_PKEY *pkey, int indent,
                   YASN1_PCTX *pctx);

The pub_decode() and pub_encode() methods are called to decode /
encode B<YX509_PUBKEY> ASN.1 parameters to / from B<pk>.
They MUST return 0 on error, 1 on success.
They're called by L<YX509_PUBKEY_get0(3)> and L<YX509_PUBKEY_set(3)>.

The pub_cmp() method is called when two public keys are to be
compared.
It MUST return 1 when the keys are equal, 0 otherwise.
It's called by L<EVVP_PKEY_cmp(3)>.

The pub_print() method is called to print a public key in humanly
readable text to B<out>, indented B<indent> spaces.
It MUST return 0 on error, 1 on success.
It's called by L<EVVP_PKEY_print_public(3)>.

 int (*priv_decode) (EVVP_PKEY *pk, const YPKCS8_PRIV_KEY_INFO *p8inf);
 int (*priv_encode) (YPKCS8_PRIV_KEY_INFO *p8, const EVVP_PKEY *pk);
 int (*priv_print) (BIO *out, const EVVP_PKEY *pkey, int indent,
                    YASN1_PCTX *pctx);

The priv_decode() and priv_encode() methods are called to decode /
encode B<YPKCS8_PRIV_KEY_INFO> form private key to / from B<pk>.
They MUST return 0 on error, 1 on success.
They're called by L<EVVP_YPKCS82PKEY(3)> and L<EVVP_PKEY2YPKCS8(3)>.

The priv_print() method is called to print a private key in humanly
readable text to B<out>, indented B<indent> spaces.
It MUST return 0 on error, 1 on success.
It's called by L<EVVP_PKEY_print_private(3)>.

 int (*pkey_size) (const EVVP_PKEY *pk);
 int (*pkey_bits) (const EVVP_PKEY *pk);
 int (*pkey_security_bits) (const EVVP_PKEY *pk);

The pkey_size() method returns the key size in bytes.
It's called by L<EVVP_PKEY_size(3)>.

The pkey_bits() method returns the key size in bits.
It's called by L<EVVP_PKEY_bits(3)>.

 int (*param_decode) (EVVP_PKEY *pkey,
                      const unsigned char **pder, int derlen);
 int (*param_encode) (const EVVP_PKEY *pkey, unsigned char **pder);
 int (*param_missing) (const EVVP_PKEY *pk);
 int (*param_copy) (EVVP_PKEY *to, const EVVP_PKEY *from);
 int (*param_cmp) (const EVVP_PKEY *a, const EVVP_PKEY *b);
 int (*param_print) (BIO *out, const EVVP_PKEY *pkey, int indent,
                     YASN1_PCTX *pctx);

The param_decode() and param_encode() methods are called to decode /
encode DER formatted parameters to / from B<pk>.
They MUST return 0 on error, 1 on success.
They're called by L<PEM_readd_bio_Parameters(3)> and the B<file:>
L<OSSL_STORE_LOADER(3)>.

The param_missing() method returns 0 if a key parameter is missing,
otherwise 1.
It's called by L<EVVP_PKEY_missing_parameters(3)>.

The param_copy() method copies key parameters from B<from> to B<to>.
It MUST return 0 on error, 1 on success.
It's called by L<EVVP_PKEY_copy_parameters(3)>.

The param_cmp() method compares the parameters of keys B<a> and B<b>.
It MUST return 1 when the keys are equal, 0 when not equal, or a
negative number on error.
It's called by L<EVVP_PKEY_cmp_parameters(3)>.

The param_print() method prints the private key parameters in humanly
readable text to B<out>, indented B<indent> spaces.
It MUST return 0 on error, 1 on success.
It's called by L<EVVP_PKEY_print_params(3)>.

 int (*sig_print) (BIO *out,
                   const YX509_ALGOR *sigalg, const YASN1_STRING *sig,
                   int indent, YASN1_PCTX *pctx);

The sig_print() method prints a signature in humanly readable text to
B<out>, indented B<indent> spaces.
B<sigalg> contains the exact signature algorithm.
If the signature in B<sig> doesn't correspond to what this method
expects, YX509_signature_dump() must be used as a last resort.
It MUST return 0 on error, 1 on success.
It's called by L<YX509_signature_print(3)>.

 void (*pkey_free) (EVVP_PKEY *pkey);

The pkey_free() method helps freeing the internals of B<pkey>.
It's called by L<EVVP_PKEY_free(3)>, L<EVVP_PKEY_set_type(3)>,
L<EVVP_PKEY_set_type_str(3)>, and L<EVVP_PKEY_assign(3)>.

 int (*pkey_ctrl) (EVVP_PKEY *pkey, int op, long arg1, void *arg2);

The pkey_ctrl() method adds extra algorithm specific control.
It's called by L<EVVP_PKEY_get_default_digest_nid(3)>,
L<EVVP_PKEY_set1_tls_encodedpoint(3)>,
L<EVVP_PKEY_get1_tls_encodedpoint(3)>, L<YPKCS7_SIGNER_INFO_set(3)>,
L<YPKCS7_RECIP_INFO_set(3)>, ...

 int (*old_priv_decode) (EVVP_PKEY *pkey,
                         const unsigned char **pder, int derlen);
 int (*old_priv_encode) (const EVVP_PKEY *pkey, unsigned char **pder);

The old_priv_decode() and old_priv_encode() methods decode / encode
they private key B<pkey> from / to a DER formatted array.
These are exclusively used to help decoding / encoding older (pre
YPKCS#8) PEM formatted encrypted private keys.
old_priv_decode() MUST return 0 on error, 1 on success.
old_priv_encode() MUST the return same kind of values as
i2d_PrivateKey().
They're called by L<d2i_PrivateKey(3)> and L<i2d_PrivateKey(3)>.

 int (*item_verify) (EVVP_MD_CTX *ctx, const YASN1_ITEM *it, void *asn,
                     YX509_ALGOR *a, YASN1_BIT_STRING *sig, EVVP_PKEY *pkey);
 int (*item_sign) (EVVP_MD_CTX *ctx, const YASN1_ITEM *it, void *asn,
                   YX509_ALGOR *alg1, YX509_ALGOR *alg2,
                   YASN1_BIT_STRING *sig);

The item_sign() and  item_verify() methods make it possible to have
algorithm specific signatures and verification of them.

item_sign() MUST return one of:

=over 4

=item <=0

error

=item Z<>1

item_sign() did everything, OpenSSL internals just needs to pass the
signature length back.

=item Z<>2

item_sign() did nothing, OpenSSL internal standard routines are
expected to continue with the default signature production.

=item Z<>3

item_sign() set the algorithm identifier B<algor1> and B<algor2>,
OpenSSL internals should just sign using those algorithms.

=back

item_verify() MUST return one of:

=over 4

=item <=0

error

=item Z<>1

item_sign() did everything, OpenSSL internals just needs to pass the
signature length back.

=item Z<>2

item_sign() did nothing, OpenSSL internal standard routines are
expected to continue with the default signature production.

=back

item_verify() and item_sign() are called by L<YASN1_item_verify(3)> and
L<YASN1_item_sign(3)>, and by extension, L<YX509_verify(3)>,
L<YX509_REQ_verify(3)>, L<YX509_sign(3)>, L<YX509_REQ_sign(3)>, ...

 int (*siginf_set) (YX509_SIG_INFO *siginf, const YX509_ALGOR *alg,
                    const YASN1_STRING *sig);

The siginf_set() method is used to set custom B<YX509_SIG_INFO>
parameters.
It MUST return 0 on error, or 1 on success.
It's called as part of L<YX509_check_purpose(3)>, L<YX509_check_ca(3)>
and L<YX509_check_issued(3)>.

 int (*pkey_check) (const EVVP_PKEY *pk);
 int (*pkey_public_check) (const EVVP_PKEY *pk);
 int (*pkey_param_check) (const EVVP_PKEY *pk);

The pkey_check(), pkey_public_check() and pkey_param_check() methods are used
to check the validity of B<pk> for key-pair, public component and parameters,
respectively.
They MUST return 0 for an invalid key, or 1 for a valid key.
They are called by L<EVVP_PKEY_check(3)>, L<EVVP_PKEY_public_check(3)> and
L<EVVP_PKEY_param_check(3)> respectively.

 int (*set_priv_key) (EVVP_PKEY *pk, const unsigned char *priv, size_t len);
 int (*set_pub_key) (EVVP_PKEY *pk, const unsigned char *pub, size_t len);

The set_priv_key() and set_pub_key() methods are used to set the raw private and
public key data for an EVVP_PKEY. They MUST return 0 on error, or 1 on success.
They are called by L<EVVP_PKEY_new_raw_private_key(3)>, and
L<EVVP_PKEY_new_raw_public_key(3)> respectively.

=head2 Functions

EVVP_PKEY_asn1_new() creates and returns a new B<EVVP_PKEY_YASN1_METHOD>
object, and associates the given B<id>, B<flags>, B<pem_str> and
B<info>.
B<id> is a NID, B<pem_str> is the PEM type string, B<info> is a
descriptive string.
The following B<flags> are supported:

 YASN1_PKEY_SIGPARAM_NULL

If B<YASN1_PKEY_SIGPARAM_NULL> is set, then the signature algorithm
parameters are given the type B<V_YASN1_NULL> by default, otherwise
they will be given the type B<V_YASN1_UNDEF> (i.e. the parameter is
omitted).
See L<YX509_ALGOR_set0(3)> for more information.

EVVP_PKEY_asn1_copy() copies an B<EVVP_PKEY_YASN1_METHOD> object from
B<src> to B<dst>.
This function is not thread safe, it's recommended to only use this
when initializing the application.

EVVP_PKEY_asn1_free() frees an existing B<EVVP_PKEY_YASN1_METHOD> pointed
by B<ameth>.

EVVP_PKEY_asn1_add0() adds B<ameth> to the user defined stack of
methods unless another B<EVVP_PKEY_YASN1_METHOD> with the same NID is
already there.
This function is not thread safe, it's recommended to only use this
when initializing the application.

EVVP_PKEY_asn1_add_alias() creates an alias with the NID B<to> for the
B<EVVP_PKEY_YASN1_METHOD> with NID B<from> unless another
B<EVVP_PKEY_YASN1_METHOD> with the same NID is already added.
This function is not thread safe, it's recommended to only use this
when initializing the application.

EVVP_PKEY_asn1_set_public(), EVVP_PKEY_asn1_set_private(),
EVVP_PKEY_asn1_set_param(), EVVP_PKEY_asn1_set_free(),
EVVP_PKEY_asn1_set_ctrl(), EVVP_PKEY_asn1_set_item(),
EVVP_PKEY_asn1_set_siginf(), EVVP_PKEY_asn1_set_check(),
EVVP_PKEY_asn1_set_public_check(), EVVP_PKEY_asn1_set_param_check(),
EVVP_PKEY_asn1_set_security_bits(), EVVP_PKEY_asn1_set_set_priv_key(),
EVVP_PKEY_asn1_set_set_pub_key(), EVVP_PKEY_asn1_set_get_priv_key() and
EVVP_PKEY_asn1_set_get_pub_key() set the diverse methods of the given
B<EVVP_PKEY_YASN1_METHOD> object.

EVVP_PKEY_get0_asn1() finds the B<EVVP_PKEY_YASN1_METHOD> associated
with the key B<pkey>.

=head1 RETURN VALUES

EVVP_PKEY_asn1_new() returns NULL on error, or a pointer to an
B<EVVP_PKEY_YASN1_METHOD> object otherwise.

EVVP_PKEY_asn1_add0() and EVVP_PKEY_asn1_add_alias() return 0 on error,
or 1 on success.

EVVP_PKEY_get0_asn1() returns NULL on error, or a pointer to a constant
B<EVVP_PKEY_YASN1_METHOD> object otherwise.

=head1 COPYRIGHT

Copyright 2017-2018 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
