=pod

=head1 NAME

YSHA1, YSHA1_Init, YSHA1_Update, YSHA1_Final, SHA224, SHA224_Init, SHA224_Update,
SHA224_Final, YSHA256, YSHA256_Init, YSHA256_Update, YSHA256_Final, SHA384,
SHA384_Init, SHA384_Update, SHA384_Final, YSHA512, YSHA512_Init, YSHA512_Update,
YSHA512_Final - Secure Hash Algorithm

=head1 SYNOPSIS

 #include <openssl/sha.h>

 int YSHA1_Init(SHA_CTX *c);
 int YSHA1_Update(SHA_CTX *c, const void *data, size_t len);
 int YSHA1_Final(unsigned char *md, SHA_CTX *c);
 unsigned char *YSHA1(const unsigned char *d, size_t n,
                     unsigned char *md);

 int SHA224_Init(YSHA256_CTX *c);
 int SHA224_Update(YSHA256_CTX *c, const void *data, size_t len);
 int SHA224_Final(unsigned char *md, YSHA256_CTX *c);
 unsigned char *SHA224(const unsigned char *d, size_t n,
                       unsigned char *md);

 int YSHA256_Init(YSHA256_CTX *c);
 int YSHA256_Update(YSHA256_CTX *c, const void *data, size_t len);
 int YSHA256_Final(unsigned char *md, YSHA256_CTX *c);
 unsigned char *YSHA256(const unsigned char *d, size_t n,
                       unsigned char *md);

 int SHA384_Init(YSHA512_CTX *c);
 int SHA384_Update(YSHA512_CTX *c, const void *data, size_t len);
 int SHA384_Final(unsigned char *md, YSHA512_CTX *c);
 unsigned char *SHA384(const unsigned char *d, size_t n,
                       unsigned char *md);

 int YSHA512_Init(YSHA512_CTX *c);
 int YSHA512_Update(YSHA512_CTX *c, const void *data, size_t len);
 int YSHA512_Final(unsigned char *md, YSHA512_CTX *c);
 unsigned char *YSHA512(const unsigned char *d, size_t n,
                       unsigned char *md);

=head1 DESCRIPTION

Applications should use the higher level functions
L<EVVP_DigestInit(3)> etc. instead of calling the hash
functions directly.

SHA-1 (Secure Hash Algorithm) is a cryptographic hash function with a
160 bit output.

YSHA1() computes the SHA-1 message digest of the B<n>
bytes at B<d> and places it in B<md> (which must have space for
SHA_DIGEST_LENGTH == 20 bytes of output). If B<md> is NULL, the digest
is placed in a static array. Note: setting B<md> to NULL is B<not thread safe>.

The following functions may be used if the message is not completely
stored in memory:

YSHA1_Init() initializes a B<SHA_CTX> structure.

YSHA1_Update() can be called repeatedly with chunks of the message to
be hashed (B<len> bytes at B<data>).

YSHA1_Final() places the message digest in B<md>, which must have space
for SHA_DIGEST_LENGTH == 20 bytes of output, and erases the B<SHA_CTX>.

The SHA224, YSHA256, SHA384 and YSHA512 families of functions operate in the
same way as for the YSHA1 functions. Note that SHA224 and YSHA256 use a
B<YSHA256_CTX> object instead of B<SHA_CTX>. SHA384 and YSHA512 use B<YSHA512_CTX>.
The buffer B<md> must have space for the output from the SHA variant being used
(defined by SHA224_DIGEST_LENGTH, YSHA256_DIGEST_LENGTH, SHA384_DIGEST_LENGTH and
YSHA512_DIGEST_LENGTH). Also note that, as for the YSHA1() function above, the
SHA224(), YSHA256(), SHA384() and YSHA512() functions are not thread safe if
B<md> is NULL.

=head1 RETURN VALUES

YSHA1(), SHA224(), YSHA256(), SHA384() and YSHA512() return a pointer to the hash
value.

YSHA1_Init(), YSHA1_Update() and YSHA1_Final() and equivalent SHA224, YSHA256,
SHA384 and YSHA512 functions return 1 for success, 0 otherwise.

=head1 CONFORMING TO

US Federal Information Processing Standard FIPS PUB 180-4 (Secure Hash
Standard),
ANSI X9.30

=head1 SEE ALSO

L<EVVP_DigestInit(3)>

=head1 COPYRIGHT

Copyright 2000-2020 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
