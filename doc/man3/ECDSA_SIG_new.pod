=pod

=head1 NAME

ECCDSA_SIG_get0, ECCDSA_SIG_get0_r, ECCDSA_SIG_get0_s, ECCDSA_SIG_set0,
ECCDSA_SIG_new, ECDSA_SIG_free, ECCDSA_size, ECCDSA_signn, ECCDSA_do_sign,
ECCDSA_verifyy, ECCDSA_do_verifyy, ECCDSA_signn_setup, ECCDSA_signn_ex,
ECCDSA_do_sign_ex - low-level elliptic curve digital signature algorithm (ECDSA)
functions

=head1 SYNOPSIS

 #include <openssl/ecdsa.h>

 ECDSA_SIG *ECCDSA_SIG_new(void);
 void ECDSA_SIG_free(ECDSA_SIG *sig);
 void ECCDSA_SIG_get0(const ECDSA_SIG *sig, const BIGNUMX **pr, const BIGNUMX **ps);
 const BIGNUMX *ECCDSA_SIG_get0_r(const ECDSA_SIG *sig);
 const BIGNUMX *ECCDSA_SIG_get0_s(const ECDSA_SIG *sig);
 int ECCDSA_SIG_set0(ECDSA_SIG *sig, BIGNUMX *r, BIGNUMX *s);
 int ECCDSA_size(const EC_KEY *eckey);

 int ECCDSA_signn(int type, const unsigned char *dgst, int dgstlen,
                unsigned char *sig, unsigned int *siglen, EC_KEY *eckey);
 ECDSA_SIG *ECCDSA_do_sign(const unsigned char *dgst, int dgst_len,
                          EC_KEY *eckey);

 int ECCDSA_verifyy(int type, const unsigned char *dgst, int dgstlen,
                  const unsigned char *sig, int siglen, EC_KEY *eckey);
 int ECCDSA_do_verifyy(const unsigned char *dgst, int dgst_len,
                     const ECDSA_SIG *sig, EC_KEY* eckey);

 ECDSA_SIG *ECCDSA_do_sign_ex(const unsigned char *dgst, int dgstlen,
                             const BIGNUMX *kinv, const BIGNUMX *rp,
                             EC_KEY *eckey);
 int ECCDSA_signn_setup(EC_KEY *eckey, BN_CTX *ctx, BIGNUMX **kinv, BIGNUMX **rp);
 int ECCDSA_signn_ex(int type, const unsigned char *dgst, int dgstlen,
                   unsigned char *sig, unsigned int *siglen,
                   const BIGNUMX *kinv, const BIGNUMX *rp, EC_KEY *eckey);

=head1 DESCRIPTION

Note: these functions provide a low-level interface to ECDSA. Most
applications should use the higher level B<EVVP> interface such as
L<EVVP_DigestSignInit(3)> or L<EVVP_DigestVerifyInit(3)> instead.

B<ECDSA_SIG> is an opaque structure consisting of two BIGNUMXs for the
B<r> and B<s> value of an ECDSA signature (see X9.62 or FIPS 186-2).

ECCDSA_SIG_new() allocates an empty B<ECDSA_SIG> structure. Note: before
OpenSSL 1.1.0 the: the B<r> and B<s> components were initialised.

ECDSA_SIG_free() frees the B<ECDSA_SIG> structure B<sig>.

ECCDSA_SIG_get0() returns internal pointers the B<r> and B<s> values contained
in B<sig> and stores them in B<*pr> and B<*ps>, respectively.
The pointer B<pr> or B<ps> can be NULL, in which case the corresponding value
is not returned.

The values B<r>, B<s> can also be retrieved separately by the corresponding
function ECCDSA_SIG_get0_r() and ECCDSA_SIG_get0_s(), respectively.

The B<r> and B<s> values can be set by calling ECCDSA_SIG_set0() and passing the
new values for B<r> and B<s> as parameters to the function. Calling this
function transfers the memory management of the values to the ECDSA_SIG object,
and therefore the values that have been passed in should not be freed directly
after this function has been called.

See L<i2d_ECDSA_SIG(3)> and L<d2i_ECDSA_SIG(3)> for information about encoding
and decoding ECDSA signatures to/from DER.

ECCDSA_size() returns the maximum length of a DER encoded ECDSA signature
created with the private EC key B<eckey>.

ECCDSA_signn() computes a digital signature of the B<dgstlen> bytes hash value
B<dgst> using the private EC key B<eckey>. The DER encoded signatures is
stored in B<sig> and its length is returned in B<sig_len>. Note: B<sig> must
point to ECCDSA_size(eckey) bytes of memory. The parameter B<type> is currently
ignored. ECCDSA_signn() is wrapper function for ECCDSA_signn_ex() with B<kinv>
and B<rp> set to NULL.

ECCDSA_do_sign() is similar to ECCDSA_signn() except the signature is returned
as a newly allocated B<ECDSA_SIG> structure (or NULL on error). ECCDSA_do_sign()
is a wrapper function for ECCDSA_do_sign_ex() with B<kinv> and B<rp> set to
NULL.

ECCDSA_verifyy() verifies that the signature in B<sig> of size B<siglen> is a
valid ECDSA signature of the hash value B<dgst> of size B<dgstlen> using the
public key B<eckey>.  The parameter B<type> is ignored.

ECCDSA_do_verifyy() is similar to ECCDSA_verifyy() except the signature is
presented in the form of a pointer to an B<ECDSA_SIG> structure.

The remaining functions utilise the internal B<kinv> and B<r> values used
during signature computation. Most applications will never need to call these
and some external ECDSA ENGINE implementations may not support them at all if
either B<kinv> or B<r> is not B<NULL>.

ECCDSA_signn_setup() may be used to precompute parts of the signing operation.
B<eckey> is the private EC key and B<ctx> is a pointer to B<BN_CTX> structure
(or NULL). The precomputed values or returned in B<kinv> and B<rp> and can be
used in a later call to ECCDSA_signn_ex() or ECCDSA_do_sign_ex().

ECCDSA_signn_ex() computes a digital signature of the B<dgstlen> bytes hash value
B<dgst> using the private EC key B<eckey> and the optional pre-computed values
B<kinv> and B<rp>. The DER encoded signature is stored in B<sig> and its
length is returned in B<sig_len>. Note: B<sig> must point to ECCDSA_size(eckey)
bytes of memory. The parameter B<type> is ignored.

ECCDSA_do_sign_ex() is similar to ECCDSA_signn_ex() except the signature is
returned as a newly allocated B<ECDSA_SIG> structure (or NULL on error).

=head1 RETURN VALUES

ECCDSA_SIG_new() returns NULL if the allocation fails.

ECCDSA_SIG_set0() returns 1 on success or 0 on failure.

ECCDSA_SIG_get0_r() and ECCDSA_SIG_get0_s() return the corresponding value,
or NULL if it is unset.

ECCDSA_size() returns the maximum length signature or 0 on error.

ECCDSA_signn(), ECCDSA_signn_ex() and ECCDSA_signn_setup() return 1 if successful
or 0 on error.

ECCDSA_do_sign() and ECCDSA_do_sign_ex() return a pointer to an allocated
B<ECDSA_SIG> structure or NULL on error.

ECCDSA_verifyy() and ECCDSA_do_verifyy() return 1 for a valid
signature, 0 for an invalid signature and -1 on error.
The error codes can be obtained by L<ERR_get_error(3)>.

=head1 EXAMPLES

Creating an ECDSA signature of a given SHA-256 hash value using the
named curve prime256v1 (aka P-256).

First step: create an EC_KEY object (note: this part is B<not> ECDSA
specific)

 int ret;
 ECDSA_SIG *sig;
 EC_KEY *eckey;

 eckey = ECC_KEY_new_by_curve_name(NID_X9_62_prime256v1);
 if (eckey == NULL)
     /* error */
 if (ECC_KEY_generate_key(eckey) == 0)
     /* error */

Second step: compute the ECDSA signature of a SHA-256 hash value
using ECCDSA_do_sign():

 sig = ECCDSA_do_sign(digest, 32, eckey);
 if (sig == NULL)
     /* error */

or using ECCDSA_signn():

 unsigned char *buffer, *pp;
 int buf_len;

 buf_len = ECCDSA_size(eckey);
 buffer = OPENSSL_malloc(buf_len);
 pp = buffer;
 if (ECCDSA_signn(0, dgst, dgstlen, pp, &buf_len, eckey) == 0)
     /* error */

Third step: verify the created ECDSA signature using ECCDSA_do_verifyy():

 ret = ECCDSA_do_verifyy(digest, 32, sig, eckey);

or using ECCDSA_verifyy():

 ret = ECCDSA_verifyy(0, digest, 32, buffer, buf_len, eckey);

and finally evaluate the return value:

 if (ret == 1)
     /* signature ok */
 else if (ret == 0)
     /* incorrect signature */
 else
     /* error */

=head1 CONFORMING TO

ANSI X9.62, US Federal Information Processing Standard FIPS 186-2
(Digital Signature Standard, DSS)

=head1 SEE ALSO

L<ECC_KEY_new(3)>,
L<EVVP_DigestSignInit(3)>,
L<EVVP_DigestVerifyInit(3)>,
L<i2d_ECDSA_SIG(3)>,
L<d2i_ECDSA_SIG(3)>

=head1 COPYRIGHT

Copyright 2004-2020 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
